[["Map",1,2,9,10,63,64,365,366,457,508,599,600,610,611],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.15.1","content-config-digest","45445e41deb61a7d","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://nick.vanexan.ca\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":\"127.0.0.1\",\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{\"/writing\":\"/articles\"},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true,\"allowedDomains\":[]},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false,\"failOnPrerenderConflict\":false},\"legacy\":{\"collections\":false}}","posts",["Map",11,12,22,23,32,33,42,43,53,54],"web-components",{"id":11,"data":13,"body":18,"filePath":19,"digest":20,"legacyId":21,"deferredRender":17},{"title":14,"description":15,"date":16,"published":17},"Web Components","They keep getting better every day",["Date","2023-02-25T00:00:00.000Z"],true,"A while back I re-wrote my website. Unhappy with the performance hits of large frameworks, I ripped out Next.JS and React along with it. I replaced those with my own custom build system powered by [Markdoc](https://markdoc.dev/). You can read more about the journey and the performance gains [here](https://nick.vanexan.ca/posts/markdoc).\n\nAt the time, I made a decision to use an HTML renderer for my pages and to use [Web Components](https://developer.mozilla.org/en-US/docs/Web/Web_Components) to add progressive enhancement where interactivity was desired.\n\nWeb Components were a mixed bag of a choice. They run natively in the browsers, and so no framework is required to create custom elements and leverage the Shadow DOM. But their API is not ergonomic (i.e. they're super verbose to write). And they necessarily require a browser to run, which for a time ruled out server-side rendering (SSR).\n\nBut things are changing. Quickly. And I think this is really good news.\n\n## Ergonomics\n\nThere are a number of non-framework... err... frameworks... emerging for creating Web Components, which improve the ergonomics of writing custom elements. I'll briefly mention my favourites.\n\n[Lit](https://lit.dev/) is probably the most popular and well known. You can, for example, start a new [Vite](https://vitejs.dev/) project with Lit. It is also a default in the [Open WC generators](https://open-wc.org/docs/development/generator/). Lit is cool because it allows you to write your Web Components in TypeScript, with JSX-like syntax. It uses ==tagged template literals==, which means you don't need to learn custom syntax and can start writing custom elements without fuss. In addition, Lit has a tiny footprint, weighing in at 5kb (minified and compressed). A small overhead for a dramatically better authoring experience.\n\nHere's an example of a web component written in Lit:\n\n```typescript\nimport {html, css, LitElement} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement('simple-greeting')\nexport class SimpleGreeting extends LitElement {\n  static styles = css`p { color: blue }`;\n\n  @property()\n  name = 'Somebody';\n\n  render() {\n    return html`\u003Cp>Hello, ${this.name}!\u003C/p>`;\n  }\n}\n```\n\n[Stencil](https://stenciljs.com/) is a more comprehensive library than Lit for building reusable, scalable design systems. On the surface, Stencil seems similar to Lit. You can use TypeScript. The syntax is JSX-like. There are decorators that shortcut a lot of things for you. But the true power of Stencil is, for me, in its tooling as a library for creating design systems. Out of the box, it gives you everything you need to write your components, test them, document them, and define their types.\n\nHere's an example of a web component written in Stencil:\n\n```typescript\n@Component({\n  tag: 'ds-text',\n  styleUrl: 'ds-text.css',\n  shadow: true,\n})\nexport class Text {\n  render() {\n    return (\n      \u003Cslot name=”ds-corp-text”>\n        Your Text Rendered Here\n      \u003C/slot>\n    );\n  }\n}\n```\n\nBut wait, there's more!\n\nStencil doesn't just allow you to build and output Web Components for use in your projects; ==it also can compile your Web Component into framework-specific component code (such as Vue, React, Angular, etc.)==. This makes Stencil a great choice for teams looking to build a future proof design system at organizations that might be using [Micro Frontends](https://nick.vanexan.ca/posts/micro-frontends) with different frameworks and tech stacks.[^1] You can write a component once, and compile it for Web (as a custom element), React, Vue, etc.\n\n## SSR and Declarative Shadow Dom\n\nModern web sites and applications rely on static-site generation (SSG) and server-side rendering (SSR) to dramatically improve performance outcomes over traditional client-side only rendered (CSR) applications.\n\nUsing Web Components in your architecture can create a lot of headache if you're doing SSR. Why? Because until recently, the only way to use the native [Shadow DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM) was to construct a [`shadowRoot`](https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot) using JavaScript at runtime. There was no built-in way to express Shadow Roots in the server-generated HTML.\n\nAn important negative side effect of this lack of SSR support is layout shifting after the page has loaded, or temporary displays of a flash of unstyled content (\"FOUC\") while loading the Shadow Root's stylesheets. When a custom element is rendered by the server, but then has its `shadowRoot` created at runtime to \"hydrate\" the component, this can be the result. And it requires clever hacks to engineer around.\n\nUntil now.\n\n[Declarative Shadow DOM (DSD)](https://developer.chrome.com/articles/declarative-shadow-dom/) is a web platform feature currently in the standardization process that removes this limitation, bringing Shadow DOM to the server. And last week, the Chrome Dev team [announced](https://developer.chrome.com/articles/declarative-shadow-dom/) it would be enabled by default in Chrome 111.\n\nYou can read more about how DSD works at the links above. But the TLDR is, with the introduction of DSD, it's now possible for a Custom Element to have a `shadowRoot` before it gets upgraded. This means the element will have a `shadowRoot` property already available when it is instantiated, without your code having to explicitly create one.\n\nAs a new web platform API, Declarative Shadow DOM does not yet have widespread support across all browsers. But change is in the air. And the future for Web Components is looking bright.\n\n[^1]: Indeed, some of the issues I mentioned in [this earlier post](https://nick.vanexan.ca/posts/micro-frontends) re disparate MFE tech stacks could fall away somewhat, at least at a technical level, if you use Stencil for your design system. Organizationally, I'd still recommend keeping a unifying stack for your MFEs.","src/content/posts/web-components.mdoc","3ad839f6babc4e14","web-components.mdoc","astro-keystatic-markdoc",{"id":22,"data":24,"body":28,"filePath":29,"digest":30,"legacyId":31,"deferredRender":17},{"title":25,"description":26,"date":27,"published":17},"Astro + Keystatic + Markdoc","Migrating to Astro + Keystatic",["Date","2024-02-09T00:00:00.000Z"],"Hello from Astro!\n\nLast week, I re-wrote my website, porting it from a custom [Markdoc](https://markdoc.dev/) build solution to a new solution that leverages [Astro](https://astro.build/) and [Keystatic](https://keystatic.com/). This is a short summary of my journey.\n\n## Motivation\n\nA couple of years ago I ripped out [Next.JS](https://nextjs.org/) and [MDX](https://mdxjs.com/) from my personal website, unhappy with the fact that my users had to download React and related framework JS for what was a very simple and primarily text-based website. I replaced it with [Markdoc](https://markdoc.dev/) and a couple of small build and compile scripts. You can [read more](https://nick.vanexan.ca/posts/markdoc) about that journey, and the [performance gains](https://nick.vanexan.ca/posts/markdoc#performance-gains-using-markdoc-+-custom-build) I got from doing that.\n\nEverything so far has worked wonderfully. I write my posts in markdown either in [iA Writer](https://ia.net/writer) or directly on [GitHub](https://github.com/) . The changes I make against the GitHub repo automatically trigger a new [Vercel](https://vercel.com/) build and deployment. The build and deployment takes \u003C 1 minute. Just commit a new Markdoc file to the repo and you have a new blog post. Simple and effective.\n\nWhat I loved about this solution was that I wrote the build scripts, compiler, templates, etc. myself and did not have to rely on hardly any libraries / frameworks for implementation. I am a minimalist. My site was about as minimal as it gets. There was no third party libraries to maintain other than Markdoc, and honestly I could never have updated that library and it would have been fine. This made my code very resilient to changes. And to me that's a huge win. The less tooling I use, the less there is to maintain, the more the solution will last amidst all the new hotness that may surface in web dev land one day and be gone the next.\n\nBut there's been a few pain points:\n\n- **Routing and templating:** my very simple templating solution at the moment works fine and could be extended further, to support more advanced routing and templating, but I'm busy lately and I'm feeling pretty lazy about that.\n- **Editing content:** I like writing my first drafts of things in [iA Writer](https://ia.net/writer) or Vim (with the [vim-pencil](https://github.com/preservim/vim-pencil) plugin), but sometimes I want to make a change using a WYSIWYG editor, particularly when adding images.\n\nI wanted to solve these pain points, but with the same hard requirements I had two years ago:\n\n- **Performance:** the solution must deliver outcomes that are at least as fast as what I have today… which, given that I've basically eliminated most JS from my delivered site, is very fast.\n- **Resilience:** the solution must be resilient to changes in the industry over time, and be portable to other technologies or a simple custom build script as a fallback.\n\nI was happy to discover that others with a great deal more money and time than me have also been working on leveraging [Markdoc](https://markdoc.dev/) to deliver blazing fast content websites with minimal JavaScript. Enter [Astro](https://astro.build/) + [Keystatic](https://keystatic.com/).\n\n## Astro\n\n[Astro](https://astro.build/) is self-described as a framework but it's unique among other frameworks in that it ultimately produces HTML and CSS and only JS when / as necessary. It achieves this through an island-based architecture. In a way, it's a much grander extension of my initial idea. It has support for routing, can do hybrid apps that are statically generated as well as server side rendered and client hydrated, and has wonderful opinions about integrations with web-components. It's simple to get the hang of and has a really ergonomic approach to routing and templating.\n\n## Keystatic\n\n[Keystatic](https://keystatic.com/) is a file-based CMS by [Thinkmill](https://www.thinkmill.com.au/) that leverages Markdoc to allow you to live edit content on GitHub or your local file system in a very cool way. With Keystatic, you can spin up a fairly robust CMS that gives you a great interface and workflow for creating and editing and Markdoc-based content. It's awesome. And makes content management with markdoc super easy.\n\nHere's a quick example of what it looks like editing this very post in Keystatic:\n\n![Writing a blog post in Keystatic](/images/posts/astro-keystatic-markdoc/Screenshot%202024-02-09%20at%204.24.58%20PM.webp)\n\n## Bringing It All Together\n\nMigrating my existing [Markdoc](https://markdoc.dev/) site to a solution based on [Astro](https://astro.build/) and [Keystatic](https://keystatic.com/) was pretty straightforward. I created a new repo based on the [Keystatic Astro quick start](https://keystatic.com/docs/installation-astro). I then set up my Keystatic schemas and copied over my existing Markdoc files. This was mostly just a matter of copy-paste, with a couple of tweaks to some frontmatter fields. Resilient technologies ftw!\n\nThe one thing that Astro + Keystatic's Markdoc implementations lacked, however, were support for parsing footnotes and highlights. The Markdoc team does not favour augmenting their parser to parse these items, preferring instead for users of Markdoc to write their own custom tags.[^1]\n\nI am not in favour of this approach for three reasons: (1) I find Markdoc tag syntax less ergonomic than basic markdown syntax; (2) the Keystatic approach to dealing with custom tags inside of a rich content editor in the CMS, via its [componentBlocks API](https://keystatic.com/docs/fields/document#component-blocks), is a bit too rudimentary for my liking at this point; and (3) the way iA Writer renders markdown in its app is how I also render markdown on my site, and so if I open a Markdoc file in iA Writer for content authoring or editing, I want to see the same renderings for highlights and footnotes.\n\nHere's an example of how iA Writer interprets and renders highlights and footnotes...\n\n![Editing a post in iA Writer](/images/posts/astro-keystatic-markdoc/Screenshot%202024-02-09%20at%204.40.34%20PM.webp)\n\nI succeeded in getting my desired result without custom Markdoc tags by taking the custom parsing logic I wrote for my existing site and publishing it as an NPM package ([@nvanexan/markdoc-extensions](https://www.npmjs.com/package/@nvanexan/markdoc-extensions)). This package just has a simple parser that extends the existing Markdoc parser with optional support to also parse highlights and footnotes. I simply import this package into my new site's repo, and then [patch-package](https://www.npmjs.com/package/patch-package) the [@astrojs/markdoc](https://www.npmjs.com/package/@astrojs/markdoc) library, substituting my extended parser for the vanilla Markdoc parser. Works like a charm.\n\n![Screenshot showing highlights and footnotes on my site](/images/posts/astro-keystatic-markdoc/Screenshot%202024-02-09%20at%205.00.25%20PM.webp)\n\n## Results and Performance\n\nI am very happy with the results of this experiment. I now have a nice CMS-like editing experience when I want it, with the flexibility of still being able to edit and author content in my repo directly even without Keystatic, because it's just Markdoc at the end of the day. Resilience!\n\nWhat about performance? I am thrilled to see that ==the lighthouse scores I achieved two years ago when I ripped out Next.JS and MDX and replaced with my own Markdoc solution are still maintained==. Here's a comparison of all three versions of this site (Next.JS, Markdoc custom, Astro + Markdoc).\n\n![2019 site - using Next.JS and MDX](/images/posts/astro-keystatic-markdoc/old-site-desktop.webp)\n\n![2022 site score - custom Markdoc solution](/images/posts/astro-keystatic-markdoc/Screenshot%202024-02-09%20at%204.57.05%20PM.webp)\n\n![2024 site score - with Astro + Keystatic + Markdoc all working together](/images/posts/astro-keystatic-markdoc/Screenshot%202024-02-09%20at%204.56.47%20PM.webp)\n\n## Concluding Thoughts\n\nPorting my site to Astro was really easy, because I had started with a resilient [Markdoc](https://markdoc.dev/)-based solution. I am a bit uncomfortable about the maintainability of an [Astro](https://astro.build/)-based solution (thinking of my experience with [GatsbyJS](https://www.gatsbyjs.com/) for example of how promising framework ideas can go sideways pretty quickly) but it was a perfect quick win to give me some CMS-like capabilities without having to sacrifice performance. I think I can summarize my thoughts on this tech as follows...\n\n- **Astro:** the best framework out there right now for building content-based websites with killer performance.\n- **Keystatic:** a really good CMS-like experience for small marketing and personal sites like this one, with a lot of potential for larger sites to come with the development of [Keystatic Cloud](https://keystatic.cloud).\n- **Vercel:** the best deployment solution for web sites and apps out there right now, from automated preview builds on PRs, to collaboration and commenting on live preview builds, etc.\n- **Markdoc:** a super powerful innovation on markdown, and I think a fairly resilient piece of tech for year to come given its portability and growing popularity in frameworks like Astro.\n\n[^1]: See [issue 70](https://github.com/markdoc/markdoc/issues/70) and my [pull request 40](https://github.com/markdoc/markdoc/pull/40) in the Markdoc repo for more details.","src/content/posts/astro-keystatic-markdoc.mdoc","0b14123d965ac125","astro-keystatic-markdoc.mdoc","markdoc",{"id":32,"data":34,"body":38,"filePath":39,"digest":40,"legacyId":41,"deferredRender":17},{"title":35,"description":36,"date":37,"published":17},"Markdoc","Using Markdoc for static site generation",["Date","2022-05-19T00:00:00.000Z"],"Last week I discovered [Markdoc](https://markdoc.io/). It's a Markdown parser and authoring framework by the folks at [Stripe](https://stripe.com) that allows you to *compose* content in a fully declarative way.[^1] I love the philosophy and ambition.\n\nFor the past couple of years I've used [Next.JS](https://nextjs.org/) + [MDX](https://mdxjs.com/) to render my site. This worked well, and I thought the combination of static site rendering and then hydration with React was great. But over time, I've learned that I don't need or want React at all. All I really need is some HTML and CSS with a sprinkle of JS here and there. I got pretty close to this on the last iteration of my site, but ultimately needed MDX and Next.JS to help shape my Markdown into a design.\n\nMarkdown is great, and you can use it to express quite a bit, but there's always been a \"last mile\" wherein you need something else to get your Markdown files transformed into the HTML needed to match your design and interactivity goals. And it's here - precisely in this last mile - that Markdoc fills an important void.\n\n## What makes Markdoc unique\n\nThe folks at Stripe have a good description of what makes Markdoc unique [here](https://markdoc.io/docs/overview). The highlights for me were:\n\n1. It extends Markdown with a custom syntax for tags and annotations, providing a way to tailor content to individual users and introduce interactive elements, such as native web components.\n1. It has a simple and elegant design: creating an abstract syntax tree, which you can then use to render HTML, JSX or anything else you want.\n1. It provides an extensible system for defining custom tags that can be used seamlessly in Markdown content. This means it can support things like custom tags, conditional content, variable interpolation, and so on.\n\nAnd I was excited to see that they included an HTML renderer in addition to renderers for JSX. The dream of being able to go from Markdown to a more sophisticated HTML / CSS template, without React, finally seemed feasible.\n\n## How it works\n\nMarkdoc is a superset of Markdown (specifically the [CommonMark spec](https://spec.commonmark.org/)), which means the syntax you use for your content is basically just Markdown, but you can add additional custom content with custom \"Tags\".\n\nThere's [three phases](https://markdoc.io/docs/render) to rendering Markdoc: (1) parse; (2) transform; (3) render. You pass your content into the parser. The parser creates an [abstract syntax tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree), which you then process through a transformer method into objects the renderer can understand, and then the renderer renders the desired output (HTML, JSX, etc.).\n\nFor example, let's say I wanted to render custom `\u003Csection>` elements within my markup. I can do that with Markdoc like so.\n\nFirst, I would define that element in my Markdown file using the Markdoc tag syntax.\n\n```liquid\n# Header\n\n{% section %}\n\nThis content will be rendered in a `section` element\n\n{% /section %}\n```\n\nSecond, I would create a custom Tag schema and add it to the config object I will eventually pass to the Markdoc parser for parsing.\n\n```typescript\nimport { Config, Node, Tag } from \"@markdoc/markdoc\";\n\nexport const section = {\n  description: \"Create a section container\",\n  children: [\"heading\", \"paragraph\", \"list\", \"item\", \"tag\"],\n  attributes: {},\n  transform: (node: Node, config: Config) => {\n    const attributes = node.transformAttributes(config);\n    const children = node.transformChildren(config);\n    return new Tag(`section`, attributes, children);\n  },\n};\n```\n\n```typescript\nimport { section } from \"./section.markdoc\";\n\nexport const config = {\n  nodes: {},\n  tags: {\n    section,\n  },\n  partials: {},\n};\n```\n\nThird, I would pass the content I want to transform and the config with my custom Tags to Markdoc to parse.\n\n```javascript\nimport { config } from \"./config.markdoc\";\n\nconst ast = Markdoc.parse(markdownFile);\nconst content = Markdoc.transform(ast, config);\nconst html = Markdoc.renderers.html(content);\n```\n\nAnd that's basically it. Applied to the example above, the end result is a `\u003Csection>` tag in my HTML, which I can then style or augment with JS as needed.[^2]\n\n```html\n\u003Carticle>\n  \u003Ch1>Header\u003C/h1>\n  \u003Csection>\n    \u003Cp>This content will be rendered in a \u003Ccode>section\u003C/code> element.\u003C/p>\n  \u003C/section>\n\u003C/article>\n```\n\nI can now reuse the `{% section %}` tag anywhere in my Markdown documents. And you can certainly go further. For example, instead of rendering a simple `\u003Csection>` element, you can render a [web component](https://developer.mozilla.org/en-US/docs/Web/Web_Components), complete with its own UI logic and shadow dom.\n\nYou can also [conditionally render section blocks](https://markdoc.io/docs/tags#built-in-tags), use [partials](https://markdoc.io/docs/partials) to DRY out your Markdown content that is repetitive across files, define and use [variables](https://markdoc.io/docs/variables), and [so on](https://markdoc.io/docs/getting-started).\n\n## Performance gains using Markdoc + custom build\n\nI spent last weekend re-writing my site to remove Next.JS (and thus React) and make use of Markdoc. I cut a [fresh repo](https://github.com/nvanexan/nve2022). I built a simple build script in TypeScript which takes my Markdown files, templated with Markdoc, and renders them to static html pages using the Markdoc HTML renderer.\n\nThere's a bit more to it than that, of course. I had to add support for CSS parsing, so critical styles could be injected into the html files before the global.css loaded, frontmatter parsing for meta tags for SEO reasons, etc. But by the end of the weekend, I had succeeded in removing React and creating a super lightweight site of basically just HTML and CSS.\n\nThe performance results were fun. Some comparisons of [Lighthouse](https://developers.google.com/web/tools/lighthouse) metrics...\n\n![Old (next.js) site - desktop](/images/posts/markdoc/old-site-desktop.webp)\n\n![New site (markdoc) - desktop](/images/posts/markdoc/new-site-desktop.webp)\n\n![Old site (next.js) - mobile](/images/posts/markdoc/old-site-mobile.webp)\n\n![New site (markdoc) - mobile](/images/posts/markdoc/new-site-mobile.webp)\n\n## Lessons learned\n\nI learned some lessons along my journey.\n\nFirst, not all Markdown tokens or features are supported by Markdoc. Link and image title attributes, for example, were not supported initially. I've since contributed a couple of PRs to get those items handled by the parser.[^3] Similarly, footnotes are not directly supported at the time of writing. This means that the parser, which creates the AST, doesn't inherently parse Markdown footnotes at the first stage of processing. I made a [PR to the Markdoc repo](https://github.com/markdoc/markdoc/pull/40) to provide support for footnotes in the Markdoc parser itself, but the authors have, I think fairly, declined the addition of this for now. They would prefer that users re-mix existing APIs rather than continually extend the syntax of Markdoc itself. The user is then left with a couple of options: create and use custom tags, like `{% footnotes %}`, or wrap the Markdoc parser with extended functionality for making footnotes supported in the AST as nodes vs. just tags.[^4]\n\nSecond, there is the age-old engineering issue of trade-offs. I had some hesitation about incorporating a specific syntax into my fairly vanilla Markdown files. To be sure, I had to make this choice when I chose MDX before too. But it is an important consideration, as you will start to get married to the specific syntax. For example, at the top of my blog posts, I use a [Markdoc partial](https://markdoc.io/docs/partials) to render the header of each post, so I can keep my code dry and not have to repeat this everywhere. But when viewing the document outside of this website, the syntax appears alien and not super fun to look at. If you value *clean* and *portable* Markdown (*i.e.* easily readable / parseable / transferrable across apps and other places that accept Markdown) then Markdoc is likely not for you.\n\nThird, it's important to keep in mind what renderer you're going to use. In my case I chose to render HTML instead of JSX, so I could use basic HTML and then add web components as needed. But [static rendering of native web components isn't well supported](https://lamplightdev.com/blog/2019/07/20/how-to-server-side-render-web-components/) because, well, those components rely on the actual browser window for operation. So there's more cognitive effort required to do static and progressive enhancement with web components to avoid layout shifts, etc. Accordingly, you may wish to [combine Markdoc with Next.JS](https://markdoc.io/docs/nextjs) or [React](https://markdoc.io/docs/examples/react) if it better fits your use case.\n\n## Concluding thoughts\n\n[Markdoc](https://markdoc.io) is super great. And powerful. If you've ever wanted your Markdown to support things like templating, conditionals, variables, etc., Markdoc makes it dead easy to support and implement, with a nice API for extending and building your own tags.\n\nI'm going to keep experimenting with it, and contributing to it too. I think it has a lot of value and promise.\n\n[^1]: Unlike [MDX](https://mdxjs.com/), you don't embed code or react components. It's more like the [Liquid template language](https://shopify.github.io/liquid/) developed by Shopify.\n\n[^2]: Note that you're not just confined to rendering semantic HTML tags. You can also render custom elements that correspond to your [web components](https://developer.mozilla.org/en-US/docs/Web/Web_Components). And that's awesome. Because you can basically at that point get the benefit of both Markdown for content authoring and interactive richness that comes with web components and the built in shadow dom.\n\n[^3]: The folks at Stripe who are maintaing Markdoc are quite responsive. Shoutout to them, and hat tip to the company for open sourcing this.\n\n[^4]: I did the latter for this site. You can find a rough implementation [here](https://github.com/nvanexan/nve2022/blob/main/lib/parser.ts).","src/content/posts/markdoc.mdoc","99255eaad6eba1a8","markdoc.mdoc","blazor-a-review-and-primer-for-ui-devs",{"id":42,"data":44,"body":49,"filePath":50,"digest":51,"legacyId":52,"deferredRender":17},{"title":45,"description":46,"socialImageUrl":47,"date":48,"published":17},"Blazor: A Primer for UI Devs","Opinionated notes from the field","/nve-social-logo.png",["Date","2024-02-18T00:00:00.000Z"],"For the past few months I’ve been working on a client project that leverages Microsoft’s [Blazor](https://learn.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-8.0) technology for building web applications. The following are some notes and thoughts I have about the technology, from the perspective of a UI developer previously focused on the JavaScript ecosystem.\n\n## What is Blazor?\n\n[Blazor](https://learn.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-8.0) is a framework for building interactive client-side web UI with [.NET](https://learn.microsoft.com/en-us/dotnet/core/introduction). You can liken it to [React](https://react.dev/), though a better analogue might be [Next.JS](https://nextjs.org). It is much larger than a rendering library; it is a full framework, complete with its own opinions and technologies for routing, form handling, server-side rendering and much more. Like other modern front-end frameworks, Blazor envisions composing UI in a component-based architecture.\n\nOne of the primary differences between Blazor and other frameworks is that you write your UI in [C#](https://learn.microsoft.com/en-us/dotnet/csharp/), a statically typed language used primarily for back-end development.\n\nBlazor components are .NET C# classes built into .NET assemblies. The component class is usually written in the form of a Razor[^1] markup page with a .razor file extension (e.g. `Button.razor`).[^2]\n\nHere’s an example of a Blazor component defined in a Razor page:\n\n```razor\n\u003CPageTitle>Counter\u003C/PageTitle>\n\n\u003Ch1>Counter\u003C/h1>\n\n\u003Cp role=\"status\">Current count: @currentCount\u003C/p>\n\n\u003Cbutton class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me\u003C/button>\n\n@code {\n    private int currentCount = 0;\n\n    private void IncrementCount()\n    {\n        currentCount++;\n    }\n}\n```\n\nBlazor can run (and in my view is intended primarily to run) on the server.[^3] This makes Blazor more like [Next.JS](https://nextjs.org/) than simple client-side React. As with Next.JS, this changes the designs and patterns you may use for development. For example, you don’t need to call an API when you can query the database directly and pull back the data *before* the component is rendered.\n\nAnother important difference between Blazor and other frameworks is in how client-server communication happens. Updating UI content and handling events happen over a SignalR connection using the WebSockets protocol.[^4]\n\nThat sets the table. Let’s move on to the meal. In the next sections I’m going to delve into some features of Blazor and the trade-offs I’ve encountered working with it in the field.\n\n## C# vs. JS / TS\n\nThere are important differences between C# and JavaScript. If you’re coming to Blazor from the JavaScript ecosystem, the differences that will be most relevant to you are:\n\n- **Type System:** C# is a statically-typed language, meaning you have to declare the type of each variable and the compiler checks types at compile-time.\n- **Syntax and Structure**: C# syntax is similar to Java and C++, with a curly brace syntax and a strong emphasis on object-oriented programming principles vs the prototypal / functional nature of JavaScript.\n- **Concurrency Model**: C# has built-in support for multithreading and asynchronous programming through features like async/await and the Task Parallel Library (TPL).\n\nMany JS devs are actually writing [TypeScript](https://www.typescriptlang.org/) these days. And so many of the differences in terms of static typing are increasingly negligible, as production grade JS is increasingly looking like C#. But whereas TypeScript allows for escape hatches to apply greater or lesser type safety as needed, C# does not.\n\nPractically, this means you have great type safety at compile time. This makes the developer experience enjoyable in certain contexts. You certainly detect a lot more errors or breaking changes at compile time, which is useful particularly when refactoring. You can also fairly easily rename classes and namespaces, again useful when refactoring.\n\nBut you will also spend a lot more time taming OOP and learning idiosyncrasies of how C# works within the context of .NET.[^5]\n\n## Component Ergonomics\n\nBuilding components in Blazor is similar to building components in other frameworks. Components consist of razor templates for rendering HTML, C# classes for writing component  logic, and css files for writing styles.\n\nAll three of these elements can be combined in a single razor page to author a component. Here’s an example:\n\n```razor\n@namespace App.Common.Callouts\n\n\u003Cdiv class=\"@($\"app-callout {Variant?.ToString().ToLower()}\")\">\n    @Content\n\u003C/div>\n\n@code {\n    [Parameter] public RenderFragment? Content { get; set; }\n    [Parameter] public Variant? Variant { get; set; }\n\n    public enum Variant\n    {\n        Error,\n        Warning,\n        Notice\n    }\n}\n\n\u003Cstyle>\n    .app-callout {\n        border: solid 1px var(--app-colors-light-grey);\n        background: var(--app-colors-white);\n        padding: 1rem;\n    }\n\t\n    .app-callout.error {\n        border-color: var(--app-colors-red);\n        background: var(--app-colors-light-red);\n    }\n\u003C/style>\n```\n\nThis is a simple component that renders a callout on a screen. It takes a parameter called Content of RenderFragment type and renders that within a containing div, that attaches styles to the containing callout box.\n\nThere are two things to notice here. The first is that we’re using specific syntax for C# and razor files to do the rendering. This is great if you’re a C# dev because you can use the syntax you’re already familiar with. If you're coming to Blazor without much C# experience, there is going to be yet-another syntax to learn to render things on a page. The upside, however, is what you are writing is C#. So as long as you’re down for learning C#, the razor templating syntax will fit in pretty well along your journey without getting in your way.\n\nThe second thing to notice is that while all the constituent elements of a component (template, logic, styles) *can* be written in a single `.razor` file, in practice they are commonly not, and instead are separated into three files:\n\n- A `.razor` file for the template and binding to variables in the `.razor.cs` file\n- A `.razor.cs` file for handling the code and class logic of the component\n- A `.razor.css` file for handing the styling of the component\n\nThe reason for this is because without a corresponding `.razor.cs` file, Visual Studio and Visual Studio Code struggle with IntelliSense and namespaces with razor files.  Further, if you want your styles to be scoped to the component (i.e. [css isolation](https://learn.microsoft.com/en-us/aspnet/core/blazor/components/css-isolation?view=aspnetcore-8.0)), you need to put them in a separate .css file.\n\nThe key takeaway here is that if you want CSS isolation and you want your developer experience to work properly, you have to break your components into three separate files. Some developers prefer the separation of these three concerns into separate files, so I’ll let you decide how you feel about that. Personally, I like to work with all three concerns in the same file where it makes sense to do so, and so I tend to think of this as an area needing improvement.\n\n## The Developer Experience in VS Code\n\nIf you’re coming to Blazor from the JavaScript ecosystem, it is likely you are not using [Visual Studio](https://visualstudio.microsoft.com/) as your IDE, which is what professional C# developers use.\n\nI can say as a Mac user and JavaScript / TypeScript developer that you definitely can write and build Blazor apps without Visual Studio. You can use the [.NET Core CLI](https://learn.microsoft.com/en-us/dotnet/core/tools/) to run, debug, watch, test, and build your projects or solutions, and it works very well. You can then also use [Visual Studio Code](https://code.visualstudio.com/) to write your app.[^6]\n\nWith Visual Studio Code, there are certain extensions you’re going to need to write C# for Blazor apps. These include:\n\n- The C# extension (base language support for C#)\n- The C# Dev Kit (helps you manage your code with a solution explorer and test your code with integrated unit test discovery and execution, elevating your C# development experience)\n- The .NET Install Tool (installs and manages different versions of the .NET SDK and Runtime)\n\nHaving said that, I can also say that the developer experience using Visual Studio Code is not as good as using Visual Studio. And in some cases can be difficult to work with. For example, I have found that over time the C# extension can become slow and dysfunctional. The linter seems to struggle in particular with razor files, marking many things with phantom errors or warnings that simply aren’t there when you run a clean build. This is an area that has a lot of room for improvement.\n\n## Routing and Navigation\n\n[Routing](https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing?view=aspnetcore-8.0) in Blazor is quite simple and quite good. You simply add `@page` directives to a Blazor component, and boom, you have a route.\n\n```razor\n@page \"/blazor-route\"\n@page \"/different-blazor-route\"\n\n\u003CPageTitle>Routing\u003C/PageTitle>\n\n\u003Ch1>Routing Example\u003C/h1>\n\n\u003Cp>\n    This page is reached at either \u003Ccode>/blazor-route\u003C/code> or \n    \u003Ccode>/different-blazor-route\u003C/code>.\n\u003C/p>\n```\n\nThere’s support for parameters, query params, and so on, and it’s very easy to integrate.\n\nThere’s also great support out of the box for auth guarding. Want to protect a route? Just add an authorization attribute.\n\n```\n@attribute [Authorize(Roles = \"Admin\")]\n```\n\n## JS Interop\n\nOne aspect of Blazor that UI devs may find amusing is a feature called [JS interop](https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/?view=aspnetcore-8.0). With JS interop, a Blazor app can invoke JavaScript functions from .NET methods and .NET methods from JS functions.\n\nThe JS interop feature is a concession that to be a web developer you still need to know and write JavaScript. It’s how we talk to the browser. It’s how we communicate with the DOM.\n\nSimilar to other Frameworks, Blazor assumes you won’t need to interact with the DOM directly and generally advises against doing so. But it also assumes you’ll need JS very minimally, and likely won’t be writing much yourself.\n\nThis second assumption results in a developer experience that is less than ideal. To be sure, you can import and reference third party JS modules and talk to them in your C# code. But the experience of doing so can be a bit clunky. First, you have to put your JS module somewhere to be served as a static asset. Then you have to use the JS interop to interact with it. Here's an example from the Microsoft docs for using a simple JS script to trigger a prompt.\n\n```razor\n@page \"/call-js-6\"\n@implements IAsyncDisposable\n@inject IJSRuntime JS\n\n\u003CPageTitle>Call JS 6\u003C/PageTitle>\n\n\u003Ch1>Call JS Example 6\u003C/h1>\n\n\u003Cp>\n    \u003Cbutton @onclick=\"TriggerPrompt\">Trigger browser window prompt\u003C/button>\n\u003C/p>\n\n\u003Cp>\n    @result\n\u003C/p>\n\n@code {\n    private IJSObjectReference? module;\n    private string? result;\n\n    protected override async Task OnAfterRenderAsync(bool firstRender)\n    {\n        if (firstRender)\n        {\n            module = await JS.InvokeAsync\u003CIJSObjectReference>(\"import\",\n                \"./scripts.js\");\n        }\n    }\n\n    private async Task TriggerPrompt()\n    {\n        result = await Prompt(\"Provide some text\");\n    }\n\n    public async ValueTask\u003Cstring?> Prompt(string message) =>\n        module is not null ? \n            await module.InvokeAsync\u003Cstring>(\"showPrompt\", message) : null;\n\n    async ValueTask IAsyncDisposable.DisposeAsync()\n    {\n        if (module is not null)\n        {\n            await module.DisposeAsync();\n        }\n    }\n}\n```\n\nIt works well enough, but is it elegant? I'm not so sure.\n\nThe same is true if you are writing your own JavaScript. For example, let’s say you’re asked to implement a tooltip component. You can achieve a basic level of functionality with just HTML/CSS but for more advanced edge cases you’re going to need to get into window viewport sizes and collision detection to do things like dynamically move a tooltip to the other side when the browser width moves below a certain breakpoint. You will likely need use of the [window:matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) API and the [Element:getBoundingClientRect](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) API. And because the creators of Blazor don’t think you will or should be writing much JavaScript, there’s no helpful defaults when you scaffold a new application about using TypeScript instead of JS, having a test harness for your TS/JS related code, and so on.[^7] You have to scaffold that yourself. At which point, once you start scaffolding a new TS repo with Jest for unit testing, etc. you may start to wonder... what have I really gained here?\n\nTo be sure, a Blazor app is designed for you to not have to write too much JS. But it's important to realize that when you do, inevitably, have to write JS, it can be a bit cumbersome to set up and implement.\n\n## Ecosystem\n\nBlazor is built on .NET and so as a developer you have access to whatever is available in that ecosystem. This can be positive and negative.\n\nFor things like security, or validation, or auto-mapping of objects, there’s libraries that exist in the .NET world that are awesome and a dream to use. And while you still need to import packages from a package manager, overall the developer experience is much better with [NuGet](https://www.nuget.org/) than it is with [NPM](https://www.npmjs.com/).\n\nThe trouble with the Blazor ecosystem, however, is that it is relatively limited when it comes to UI development compared to the dramatic growth of libraries and tooling in the JavaScript ecosystem over the last 10-15 years.\n\nOne important example is [Storybook](https://storybook.js.org/). Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It’s open source and free. And it does not exist in the Blazor ecosystem.\n\n![Animated screenshot of Storybook](/images/posts/blazor-a-review-and-primer-for-ui-devs/2024-02-18%2009.42.02.gif)\n\nMost C# devs I’ve talked to about this have no idea what Storybook is, and that’s understandable, as they historically have not built a lot of UI. But those who have spent time building out component libraries and design systems understand the value of this tool and related tooling.\n\nMost devs understand that design system level components should be isolated and packable as a package for other teams to consume. And that works fine in Blazor. Just create a new razor class library and publish it on NuGet and you’re golden. But the next hurdle is... how do you document those components, and make them available for other teams to understand and play with? Further, how do you test those components for different scenarios, such as dark mode, accessibility, and so on? And what tooling are you putting in your CI pipeline to catch regressions for your components across their myriad states?\n\nIn the JavaScript ecosystem, [Storybook](https://storybook.js.org/) and [Chromatic](https://www.chromatic.com/) are important tools that have made building and testing component libraries, and sharing their documentation and APIs, a lot easier, and so much so that many organizations have developed “Story-Driven Development” as a practice.[^8]\n\nCurrently, if you are looking for a Storybook-like solution, the only example I could find is a project created by a developer and maintained by a couple of others called [BlazingStory](https://github.com/jsakamoto/BlazingStory/). It does not have feature parity with Storybook and [the Storybook team has no plans to support Blazor](https://github.com/storybookjs/storybook/issues/13731#issuecomment-1164485710) at this time.\n\nAll of this could change over time, to be sure. But at the moment, if you’re coming to Blazor from the JavaScript ecosystem, you are going to find the lack of some of this tooling a bit jarring.\n\n## Testing\n\nUnit testing capabilities in Blazor are fairly good and should be familiar to developers coming from the JavaScript ecosystem. In .NET you can choose your unit testing framework of your choice, and then you can add a library called [bUnit](https://bunit.dev/index.html) to layer on top of that as your actual testing library for components.\n\nHere’s a mapping of the unit testing technologies in the Blazor and React ecosystems:\n\n{% table %}\n- Technology\n- Blazor\n- React\n---\n- Unit test runner\n- [xUnit](https://xunit.net/), [NUnit](https://nunit.org/), [MSTest](https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest)\n- [Jest](https://jestjs.io/)\n---\n- Testing library\n- [bUnit](https://bunit.dev/)\n- [React Testing Library](https://testing-library.com/docs/react-testing-library/intro/)\n---\n- Snapshot testing\n- [Verify](https://github.com/VerifyTests/Verify)\n- [Jest snapshots](https://jestjs.io/docs/snapshot-testing)\n---\n- A11Y testing\n- n/a\n- [Jest-Axe](https://www.npmjs.com/package/jest-axe)\n{% /table %}\n\n[bUnit](https://bunit.dev/index.html) is a capable testing library and its format will be familiar to those with experience using [React Testing Library](https://testing-library.com/docs/react-testing-library/intro/). The aim in both cases is to test components as they are rendered, and how they would be used by a user.\n\n```csharp\nusing Xunit;\nusing Bunit;\n\npublic class HelloWorldTest : TestContext\n{\n  [Fact]\n  public void HelloWorldComponentRendersCorrectly()\n  {\n    // Act\n    var cut = RenderComponent\u003CHelloWorld>();\n\n    // Assert\n    cut.MarkupMatches(\"\u003Ch1>Hello world from Blazor\u003C/h1>\");\n  }\n}\n```\n\nIn practice, I have found bUnit has some limitations relative to React Testing Library with respect to simulating certain inputs and handling keyboard events. The bUnit ecosystem also lacks accessibility matchers, so whereas with Jest you can use the [jest-axe](https://www.npmjs.com/package/jest-axe) library to assert that a component has no accessibility violations, you currently have to manually write tests for accessibility related functionality you want to test in your components.\n\n## Accessibility\n\nWith Blazor being based on .NET and C#, you may be wondering what its a11y story looks like. In general, I would say that Blazor itself as a technology does not prevent the development of accessible web applications, but it doesn't always make it easy either. You can use proper standard elements like `\u003Cbutton>`, you can add aria attributes to elements, you can add event handlers to control interactions on key presses, and you can set focus to elements. Some of this last mile work does require use of the JS interop, though, which can be a bit clunky to use.\n\nAn additional caution. If you’re looking to leverage an existing third-party component library for Blazor, you are going to find the options available at this time to be sorely lacking, particularly when it comes to accessibility. In my own review of the leading UI component libraries for Blazor back in October 2023, I found not one delivered WCAG AA compliant components. Many failed even basic keyboard or screen-reading implementation tests.\n\n{% table %}\n- Library\n- Accessible?\n- Notes\n---\n- [MudBlazor](https://mudblazor.com/docs/overview)\n- No\n- Roles, aria attributes, keyboard and focus support all lacking\n---\n- [MatBlazor](https://www.matblazor.com/)\n- No\n- Roles, aria attributes, keyboard and focus support all lacking\n---\n- [AntBlazor](https://antblazor.com/)\n- No\n- Roles, aria attributes, keyboard and focus support all lacking\n---\n- [Blazorise](https://blazorise.com/docs)\n- No\n- A bit better than others, but keyboard support isn't fully there (see Tabs), Date Picker is not accessible, etc.\n---\n- [Radzen](https://blazor.radzen.com/)\n- No\n- a11y issues with many components (DatePicker, Dialog, Grid, Select / Dropdown, etc.)\n---\n- [Fluent-UI](https://www.fluentui-blazor.net/)\n- No\n- A bit better than others, but still a number of issues (DatePicker for example)\n---\n- [Telerik](https://docs.telerik.com/blazor-ui/introduction)\n- Claims to be\n- A bit better than the other libraries, but requires commercial license, and API doesn’t allow you to add your own aria attributes in many components (no attribute splatting permitted), making it difficult to correct defects without support tickets.\n{% /table %}\n\nI’m not entirely surprised by this outcome. In an ecosystem consisting primarily of back-end developers, the level of attention to UI concerns regarding a11y just isn’t there. Hopefully, over time, this will improve. But for now, the existing UI library ecosystem for Blazor is alarmingly ableist when compared to something like [Shoelace](https://shoelace.style/).\n\nFurther, as mentioned above, the tooling for building accessible UI components is lacking. For example, in the JavaScript ecosystem, you have access to libraries and add-ons for your test runners like [jest-axe](https://www.npmjs.com/package/jest-axe) and [storybook-addon-a11y](https://storybook.js.org/addons/@storybook/addon-a11y) that can automate the testing of a number of accessibility related items in your unit tests or in your Storybook tests. To my knowledge, there aren’t such equivalents in Blazor’s ecosystem. Testing of accessibility is still primarily manual and / or part of end-to-end tests.\n\nThis isn’t to say of course that the accessibility posture won’t improve in this ecosystem over time. But for now, these are some important limitations.\n\n## Conclusion\n\nBlazor is a pretty cool piece of technology and a capable framework for building web applications. Its strengths come from .NET and C#, which together make it both performant and production-grade with type safety that should also help make your codebase more resilient over time. If you have a team comprised primarily of C# developers, Blazor may be the right tool for you.\n\nNotwithstanding all that it has to offer as a technology, the ecosystem it inhabits currently has less to offer UI devs than the existing JavaScript ecosystem, particularly in tooling for design systems and accessibility.\n\nI am hopeful that this might change over time. But as with most things, time and effort will be the final arbiter.\n\n[^1]: Razor is a syntax for combining HTML markup with C# code. Razor allows you to switch between HTML markup and C# in the same file with IntelliSense programming support in Visual Studio.\n\n[^2]: However, in practice, limitations with IntelliSense, namespacing and a poor developer experience in Visual Studio Code mean that .razor files typically contain basic templating for a component with the logic being placed in an accompanying partial class file (e.g. `Button.razor.cs`).\n\n[^3]: There is a client-side WASM mode if you want to return to early 2000s Macromedia Flash and have your users download large binaries before being able to see any content. Which is to say, that’s not likely something you want to reach for and not where the future of Blazor will be, in my view.\n\n[^4]: You can learn more about server-side Blazor and circuits over SignalR [here](https://www.c-sharpcorner.com/article/understanding-server-side-blazor).\n\n[^5]: How to properly use async / await with Task and not void, [for example](https://learn.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming).\n\n[^6]: There is a [Visual Studio for Mac](https://visualstudio.microsoft.com/vs/mac/) IDE but it is being retired on August 31, 2024.\n\n[^7]: The Blazor documentation examples actually have you just dumping script tags on your base index.html that attach to the window object. Not exactly scalable.\n\n[^8]: See the notes from my [Changelog for October 2023](https://nick.vanexan.ca/changelog/2023-10), wherein I mentioned Stephanie Zeng's presentation on the use of this practice at [Rangle.io](https://rangle.io).","src/content/posts/blazor-a-review-and-primer-for-ui-devs.mdoc","a372aa3630e10150","blazor-a-review-and-primer-for-ui-devs.mdoc","micro-frontends",{"id":53,"data":55,"body":59,"filePath":60,"digest":61,"legacyId":62,"deferredRender":17},{"title":56,"description":57,"date":58,"published":17},"Micro Frontends","Some thoughts on MFEs for large organizations",["Date","2023-02-22T00:00:00.000Z"],"Last week I was asked by a client to give a talk on micro frontends and design systems. The organization is in the process of moving out of a monolithic architecture with an aging frontend codebase that was written in [Dojo](https://dojotoolkit.org/) to a UI written in [React](https://reactjs.org/).\n\nI work on and with a set of a11y teams that are working to improve the accessibility of the application to [WCAG AA standards](https://www.w3.org/WAI/WCAG2AA-Conformance), supporting the organization's journey both in the monolith and its movement to a React-based design system.\n\nDuring my talk, I fielded questions about what micro frontends are, why they might be useful, and how to implement them. The following are notes I have on these topics from our journey out of a difficult monolith codebase: what's working, what's not, and lessons learned along the way.\n\n## Micro Frontends: What and Why\n\n[Micro frontends](https://micro-frontends.org/) (\"MFEs\") are an architectural pattern. The pattern is used to solve organizational and technical issues that can arise in organizations with monolith codebases. In our case, the problems that have arisen are:\n\n- The frontend code for the monolith is written in old technology, [Dojo](https://dojotoolkit.org/), which does not lend itself to well-written component-based UI. Dojo widgets are leaky. And over time, can move the frontend toward spaghetti code.\n- The frontend code in the monolith lacks unit tests. Reliance is instead placed on end-to-end regression tests.\n- Regressions are often not caught until code is shipped to main and deployed to many QA testing environments, resulting in lengthy delays between when an engineer makes a change and when defects are caught. If the defect is serious enough, developers can block the work of other teams by committing a bug to main.\n- Working with the git repo is slow and time consuming: changing branches, pulling latest, performing rebases - it all takes a long time in the monolith; nothing is snappy.\n- Most importantly, from my team's perspective, there is no proper design system for the monolith: no clear documentation of APIs for UI components, no clear separation of business and UI logic in platform-level components, and many components are repeated within the monolith by multiple teams (e.g. each team has their own implementation of a combo box).[^1]\n\nThese issues aren't great: for morale, for DX, for code quality, for user experience, and more. But with 15 year old software, you can't re-write everything in one shot overnight. You need to move incrementally to your desired state. And that's where MFEs play an important role.\n\nThe goal with implementing MFEs is to allow frontend teams to scaffold new repos that are separate and independent from the monolith.\n\nThose repos can have their own modern tech stack. In my client's case, that stack consists of [React](https://reactjs.org/) for UI, [Jest](https://jestjs.io/) for unit testing, and [Typescript](https://www.typescriptlang.org/) for type safety and easier UI API documentation.\n\nMoreover, because those frontends exist in separate repos, they can be built, tested and deployed independently of the monolith. Teams working on MFEs can move fast on building and shipping a feature, without being bogged down in the slow process required to make changes to the delicate monolith.\n\nIn the monolith, hooks are then embedded into the Dojo-based codebase to render the MFE apps where they need to be seen. I call this \"hole-punching\". You punch holes in your existing app to create a window to an MFE that is served independently. This can be done for a feature in the app, or for something used by many features, such as a global header or footer of the application.\n\n{% diagram\n   light=\"/images/diagrams/light/micro-frontends/MFEs.svg\"\n   dark=\"/images/diagrams/dark/micro-frontends/MFEs.svg\"\n   alt=\"MFE 'Hole Punch' Architecture\" /%}\n\n## MFE Benefits and What's Working\n\nSome teams within the organization are already spinning up MFE repos and getting productive in a more modern tech stack. They are realizing a number of [benefits commonly attributed to MFE architecture](https://martinfowler.com/articles/micro-frontends.html#Benefits):\n\n- Incremental upgrades\n- Simple, decoupled codebases\n- Independent deployment\n- Autonomous teams\n\nIn addition, these teams are beginning to leverage a [design system](https://www.invisionapp.com/inside-design/guide-to-design-systems/) that is being scaffolded quickly in parallel. That design system is React-based, and leverages [Storybook](https://storybook.js.org/) to give all teams a consistent set of interactive documentation.\n\nImportantly for my team, that design systems is where a lot of a11y engineering and testing is being targeted. The idea is, as feature teams spin up their MFEs, the new design system will be part of their bootstrap - a baseline dependency which they can use to compose their UI, and rely on to implement a11y correctly.\n\nThe following diagram illustrates the various stakeholders who are involved in the creation and maintenance of the design system. Feature teams are encouraged to contribute back to the design system UI kit, similar to open-source.\n\n{% diagram\n   light=\"/images/diagrams/light/micro-frontends/DesignSystems_light.svg\"\n   dark=\"/images/diagrams/dark/micro-frontends/DesignSystems_dark.svg\"\n   alt=\"Design System Stakeholders\" /%}\n\n## MFE Burdens and Common Mistakes\n\nThere are a number of recurring issues that I've seen arise at organizations during their early days with MFEs. These include:\n\n- Too many MFEs\n- Mixed technologies across MFEs\n- Mixed patterns across MFEs\n- Poor documentation and communication\n\n### Too many MFEs\n\nThe biggest issue I've seen at organizations early in their MFE journey is the creation of too many MFEs too quickly. This is an issue of architecture. It is also an issue of communication, particularly among senior leadership.\n\nFor example, leadership within my client's organization is asking how quickly the old Dojo-based UI can be replaced with the new design system. Can we do a one-for-one swap of a grid component, for example? Can we replace all the Dojo checkboxes with React checkboxes?\n\nWhile you *could try* to use MFEs to do this, in my experience this is not how best to think of MFEs. You don't want to replace single components with single MFE repos. You want to ensure that each MFE repo represents a logical segment of the application.\n\nWhile some discrete UI components may do fine as separate MFEs, generally you don't want to have an MFE for every UI component you are attempting to replace. If you have 1,000 base UI components, you'd end up with 1,000 MFEs. Now imagine trying to find the right repo to update your code. You can't easily. And good luck with debugging and onboarding.\n\n==The aim with MFEs is not to recreate spaghetti structures but to make your application more like a pizza. You want to slice your existing codebase into features or otherwise logical chunks, and move that entire slice into its own MFE.==\n\nThis process is of course more art than science. In some cases, a logical slice for an MFE might be a whole section of an application under a particular route of navigation. In other cases, it might be something more cross-cutting that still makes sense as a discrete unit of development, such as an inbox messaging service or a chatbot.\n\nThe aim is to ensure that your MFEs represent sections of the application that are logically connected. Start from your desired end state: figure out what sections of the app you want to convert, when, and what engineers you want working on those sections, and *then* cut a new MFE.\n\n### Mixed technologies across MFEs\n\nThis is another sin I've seen repeated across organizations. MFEs are advertised as ways to allow teams to leverage different tech stacks that suit their desires. Team A wants Vue, Team B wants Angular, and Team C wants React. With MFEs, they can each have it their way. Right?\n\nWrong. Or maybe, but you may not like the outcome.\n\nFirstly, if you do this, you'll need multiple design systems to cater to the multiple tech stacks, which is not desirable from a code re-usability point of view.[^2]\n\nSecondly, if you do this you'll have different coding paradigms and patterns in each MFE, making it difficult for engineers on Team A to work on features maintained by engineers on Team B. From a governance perspective, and an engineering management perspective, this is a losing proposition. Specific teams may gain velocity, but the velocity of the organization as a whole may suffer.\n\nInteroperability between teams isn't always a concern. And sometimes having a team move fast on a particular feature using a new or different tech stack makes total sense. There's no absolutes. But if the aim is to move a large organization into a cohesive new reality for a large application, keeping the technologies the same across your MFEs and design system will best preserve organizational velocity.\n\n### Mixed patterns across MFEs\n\nThis is the same issue as above applied to patterns and practices. At a high and material level, there needs to be consistency among MFEs around error handling, logging, harnesses and automation. The same is true at lower levels too, though. For example, you may have some MFEs implementing class components and more OOP development patterns whereas other teams prefer functional programming styles and composability. Or in some repos your teams may use snake casing, and in others camel casing. Where the divergences in patterns and practices are material, it becomes less easy for engineers to work across MFEs. For better organizational velocity, teams should align on patterns across different MFE repos.\n\n### Poor documentation and communication\n\nThis last issue is kindling for the rest of the issues. And it is, again, a matter of governance.\n\nPlatform engineering teams are needed to help ensure that MFEs are initially scaffolded with the right technologies, tooling, and patterns. They need to show the rest of the organization what a good starter MFE looks like, and how to go about building it out. And there needs to be adequate documentation of expectations, in the MFE readme files and on internal wikis.\n\nSimilarly, for engineers to work seamlessly across MFEs, each MFE needs to be well-documented, particularly where it departs from organizational patterns, technologies or architectures.\n\nAnd the work doesn't end after first commit. The feature teams, and the platform team, need to always be working together to document and maintain standards and a cohesive approach to patterns and practices. And here's the important part for leadership: these teams need to be supported in these efforts, with adequate resources and clear direction ==to ensure the organization is moving from 1 monolith to several MFEs together, as one, and not moving from 1 monolith to several MFEs that become their own fiefdoms with distinct tools, processes, standards and laws==.\n\nWhen thinking about desired outcomes, the aim should be making onboarding an engineer into an organization as painless as possible. With multiple MFEs, where potentially anything goes in each repo, greater vigilance in documenting decisions and approaches and maintaining standards is needed.\n\n## Summary of Lessons Learned\n\nTo summarize some lessons I've learned wrangling MFE architectures in the real world:\n\n- **Carve up your monolith by feature** => make conversion / migration to MFEs a feature-led exercise\n- **Align on patterns and tech stacks** => the same tooling for as many as possible\n- **Trust but verify; share and document** => make time for code reviews and knowledge shares for consistent patterns and practices across MFEs\n\nDoing MFEs well is not easy. It can get unruly pretty quickly. If you're having difficulties or growing pains with your move to an MFE architecture, I hope the above may be of some benefit.\n\n[^1]: To put this kind of thing in business context, see Nathan Curtis's discussion on $1,000,000 buttons in [And You Thought Buttons Were Easy?](https://medium.com/eightshapes-llc/and-you-thought-buttons-were-easy-26eb5b5c1871) [^2]: There is new tooling emerging that may make this less of an issue. With [StencilJS](https://stenciljs.com/), for example, you could write components for your design system that can then be compiled into framework-specific code in addition to native [Web Components](https://developer.mozilla.org/en-US/docs/Web/Web_Components). Most design systems in production today, however, haven't been set up in this way.","src/content/posts/micro-frontends.mdoc","b2cf830eff123f67","micro-frontends.mdoc","changelogs",["Map",65,66,75,76,85,86,95,96,105,106,115,116,125,126,135,136,145,146,155,156,165,166,175,176,185,186,195,196,205,206,215,216,225,226,235,236,245,246,255,256,265,266,275,276,285,286,295,296,305,306,315,316,325,326,335,336,345,346,355,356],"2021-12",{"id":65,"data":67,"body":71,"filePath":72,"digest":73,"legacyId":74,"deferredRender":17},{"title":68,"description":69,"date":70,"published":17},"December 2021","Summary of changes for December 2021",["Date","2021-12-31T00:00:00.000Z"],"- Continued microservice modernization work for a leading Fintech.\n- Finished some UI and serverless API work for an old client, a local management consulting firm, on a [Gatsby](https://www.gatsbyjs.com/), [Prismic](https://prismic.io/), [Netlify](https://www.netlify.com/) stack. I'm more keen on [Next.js](https://nextjs.org/) as a React framework and [Vercel](https://vercel.com/) for CI/CD these days, but it was fun to be working on the front-end again all the same.\n- With Omicron present in our city, I stopped going to the gym. My back is not happy.\n- Volunteered at a [UHN](https://www.uhn.ca/) vaccine clinic.\n- Celebrated [George's](https://www.instagram.com/georgevancheung/) 7th birthday.","src/content/changelogs/2021-12.mdoc","1fb31637eb703d42","2021-12.mdoc","2021-11",{"id":75,"data":77,"body":81,"filePath":82,"digest":83,"legacyId":84,"deferredRender":17},{"title":78,"description":79,"date":80,"published":17},"November 2021","Summary of changes for November 2021",["Date","2021-11-30T00:00:00.000Z"],"- Still working with a crew at a leading Fintech mostly on [NestJS](https://nestjs.com/) microservices and modernizing older Node services. Spent a fair bit of time writing Azure service bus integrations, cucumber bdd tests and Gatling performance tests.\n- Reduced my privacy consulting work . I am still advising a couple of companies but I’m not taking on new work in this area at this time so I can focus more on engineering work.\n- Rebuilt this personal site with [Next.js](https://nextjs.org/) and [mdx](https://mdxjs.com).\n- Started thinking of things to build so that I can learn [Rust](https://www.rust-lang.org/). I might re-write my personal CLI (fw-cli).\n- Started working with a physiotherapist to improve my back, and started working out more regularly again.\n- Learned about [Project Gemini](https://gemini.circumlunar.space/), a new internet protocol between gopher and http.","src/content/changelogs/2021-11.mdoc","67b218b62d90144b","2021-11.mdoc","2022-04",{"id":85,"data":87,"body":91,"filePath":92,"digest":93,"legacyId":94,"deferredRender":17},{"title":88,"description":89,"date":90,"published":17},"April 2022","Summary of changes for April 2022",["Date","2022-04-30T00:00:00.000Z"],"- Continued accessibility engineering for a publicly traded provider of human resources software. Really productive month. Helped them interview a few UI engineering candidates.\n- Continued embedded privacy engineering work for a high growth SaaS client. Spent time considering how data can be schemaed to facilitate GDPR Article 28(3)(e) requests.\n- Saw my sister, brother-in-law, neice and nephew for the first time in months over Easter. Ate delicious Armenian food to the point of uncomfortable fullness.\n- Got my first haircut in 5 months.\n- Went running for first time in nearly a year.\n- Watched a couple good new shows: [Tokyo Vice](https://www.imdb.com/title/tt2887954/) and [Slow Horses](https://www.imdb.com/title/tt5875444/).\n- Booked appointment for a new tattoo!\n- These are [the songs that carried me through April](https://open.spotify.com/playlist/7HPy8tb3vmtfSNrvExnqAK?si=8282076e00e54937).","src/content/changelogs/2022-04.mdoc","43d478f42f46f8ca","2022-04.mdoc","2022-01",{"id":95,"data":97,"body":101,"filePath":102,"digest":103,"legacyId":104,"deferredRender":17},{"title":98,"description":99,"date":100,"published":17},"January 2022","Summary of changes for January 2022",["Date","2022-01-31T00:00:00.000Z"],"- Continued microservice modernization work for a leading Fintech. This was the last month of our contract, wrapping nearly two years of back-end / cloud work for a large Microsoft customer.\n- Attended a few meetings to discuss next projects. Looking forward to some potential new UI opportunities.\n- Helped an old client who lost their lead privacy engineer design processes for handling data subject requests and architect a process for syncing third party data deletion requests with their sales and marketing databases.\n- Gyms were closed, and I'm still healing my back for running, but I did a fair bit of shoveling and walking in -22°C weather because Canada.\n- These are [the songs that carried me through January](https://open.spotify.com/playlist/4gSjDpT2Ji05A4VEL5n2A6?si=e2f98e53be87497a). A lot of shoegaze, perhaps echoing the blurring of days for me right now.\n- Watched [The Smile](https://www.thesmiletheband.com/) livestream concert. It's not live music, but I'll take what I can get.","src/content/changelogs/2022-01.mdoc","f6935ae2db9fcad0","2022-01.mdoc","2022-03",{"id":105,"data":107,"body":111,"filePath":112,"digest":113,"legacyId":114,"deferredRender":17},{"title":108,"description":109,"date":110,"published":17},"March 2022","Summary of changes for March 2022",["Date","2022-03-31T00:00:00.000Z"],"- Continued accessibility work for a publicly traded provider of human resources software.\n- Continued embedded privacy engineering work for a high growth SaaS client.\n- Celebrated my partner's birthday 🥳.\n- Met up with some old friends, slowly dipping toes into the world of post-Covid restrictions.\n- These are [the songs that carried me through March](https://open.spotify.com/playlist/3g9FSelbTS0gebIwuNruLn?si=ba2e7bc130584ee8).","src/content/changelogs/2022-03.mdoc","057a7e95468cdefc","2022-03.mdoc","2022-02",{"id":115,"data":117,"body":121,"filePath":122,"digest":123,"legacyId":124,"deferredRender":17},{"title":118,"description":119,"date":120,"published":17},"February 2022","Summary of changes for February 2022",["Date","2022-02-28T00:00:00.000Z"],"- Started work for a new client, a publicly traded provider of human resources software. I'm working to help make their aging [Dojo](https://dojotoolkit.org/) / [React](https://reactjs.org/) codebase accessible to [WCAG Level AA spec](https://www.w3.org/WAI/WCAG2AA-Conformance). It's not sexy work, but I like the idea that I'm enabling human rights.\n- Continued embedded work with another client who lost their lead privacy engineer. Currently assisting with the privacy design for a data warehouse in [Amazon Redshift](https://aws.amazon.com/redshift/).\n- Started studying for the [CIPT certification](https://iapp.org/certify/cipt/). I don't love certification schemes, but it seems a good way to refine and document my knowledge in this space.\n- Started going to the gym again, and doing strength training to improve my back. It has been really helpful with my day-to-day.\n- These are [the songs that carried me through February](https://open.spotify.com/playlist/5udMNSYCeBkA1hvTTPxUbZ?si=e03b6d864a2042d7).","src/content/changelogs/2022-02.mdoc","a08b4bfd5771544e","2022-02.mdoc","2022-06",{"id":125,"data":127,"body":131,"filePath":132,"digest":133,"legacyId":134,"deferredRender":17},{"title":128,"description":129,"date":130,"published":17},"June 2022","Summary of changes for June 2022",["Date","2022-06-30T00:00:00.000Z"],"- Continued UI / accessibility engineering work for a publicly traded provider of human resources software.\n- On the privacy side, I spent some time consulting on the fallout of the [CNIL decision re Google Analytics](https://www.cnil.fr/en/use-google-analytics-and-data-transfers-united-states-cnil-orders-website-manageroperator-comply).\n- Visited my parents for the first time in almost a year, and watched my dad's band play a car show in the middle of nowhere - he's 74 and still slapping the bass 😄.\n- Set up a new [raspberrypi](https://www.raspberrypi.com/) at home, running [openvscode-server](https://github.com/gitpod-io/openvscode-server) to give me a personal \"Codespace\", secured with [Tailscale](https://tailscale.com/).\n- Finished watching [Station Eleven](https://www.imdb.com/title/tt10574236/) - a difficult but also beautiful show; [Himesh Patel](https://en.wikipedia.org/wiki/Himesh_Patel) should win an emmy - he gives a tour de force performance imho.\n- Started re-watching [Halt and Catch Fire](https://www.imdb.com/title/tt2543312/) - a show about failure and feeling good lost - themes I'm working more with myself lately.\n- Got a new tattoo by [Jack Candlish](https://www.instagram.com/jwcandlish/), a Toronto artist currently at [Archive](http://www.archivetattoo.com/) whose work I admire.\n- These are [the songs that carried me through June](https://open.spotify.com/playlist/280xIdRBc2EMAoYBtrMVyn?si=2f901d8f98f9416c).","src/content/changelogs/2022-06.mdoc","d81bbf1f49463669","2022-06.mdoc","2022-11",{"id":135,"data":137,"body":141,"filePath":142,"digest":143,"legacyId":144,"deferredRender":17},{"title":138,"description":139,"date":140,"published":17},"November 2022","Summary of changes for November 2022",["Date","2022-11-30T00:00:00.000Z"],"- Continued UI / accessibility engineering work for a publicly traded provider of human resources software.\n- Assisting global SaaS provider with updates to cookie notice and operationalizing CPRA.\n- Signed out of Twitter indefinitely.\n- Started learning guitar at [On the Off Beat](https://ontheoffbeat.ca/).\n- Reading [First Man: The Life of Neil A. Armstrong](https://www.goodreads.com/book/show/205589.First_Man) by James R. Hansen.\n- These are [the songs that carried me through November](https://open.spotify.com/playlist/7rLiZKKEr9AeZ8YzrBCQQV?si=8f69179d233f4f42).","src/content/changelogs/2022-11.mdoc","f4ddee5cf20e1e5c","2022-11.mdoc","2022-05",{"id":145,"data":147,"body":151,"filePath":152,"digest":153,"legacyId":154,"deferredRender":17},{"title":148,"description":149,"date":150,"published":17},"May 2022","Summary of changes for May 2022",["Date","2022-05-31T00:00:00.000Z"],"- Continued UI / accessibility engineering work for a publicly traded provider of human resources software.\n- Continued embedded privacy engineering support for a large SaaS client.\n- Read through every decision on [GDPRHub](\u003Chttps://gdprhub.eu/index.php?title=Category:Article_5(1)(e)_GDPR>) re Article 5(1)(e) of the GDPR on data retention. **Noteworthy finding:** technical debt doesn't justify keeping personal data after it has served its use. \n- Updated my personal site to use [Markdoc](https://markdoc.io/) (Stripe's open source markdown authoring system) to render mainly flat HTML / CSS, and removed Next.JS / React. Wrote a few words about that and the perf results [here](https://nick.vanexan.ca/posts/markdoc).\n- Made some tiny contributions to the [Markdoc library](https://github.com/markdoc/markdoc) itself.\n- Barbecued for the first time this year. Jerk chicken wings!\n- These are [the songs that carried me through May](https://open.spotify.com/playlist/2udcAPL1SRZLjrJclqPvhu?si=80987d15832749d7).","src/content/changelogs/2022-05.mdoc","303f6b9f418e04e5","2022-05.mdoc","2022-12",{"id":155,"data":157,"body":161,"filePath":162,"digest":163,"legacyId":164,"deferredRender":17},{"title":158,"description":159,"date":160,"published":17},"December 2022","Summary of changes for December 2022",["Date","2022-12-31T00:00:00.000Z"],"- Continued UI / accessibility engineering work for a publicly traded HR software company, and some work on cookie policy updates for another global SaaS provider.\n- Attended a small workshop on [Web Components](https://developer.mozilla.org/en-US/docs/Web/Web_Components), and did some deep diving into algorithms and data structures (linked lists, bubble sorts, etc.) for some continuing professional development.\n- Kitted out my .vimrc with some new plugins for writing. If you're interested in using vim for writing prose, check out [vim-pencil](https://github.com/preservim/vim-pencil) and [goyo.vim](https://github.com/junegunn/goyo.vim)\n- Continued my journey into learning the guitar with some lessons on the [Circle of Fourths](https://deftdigits.com/2012/01/30/how-to-memorize-and-use-the-cycle-of-fourths/) and 6-2-5-1 chord progressions. Still looking for a decent used electric guitar.\n- Hosted our family for Boxing Day Christmas Brunch and went to a bunch of holiday parties. Big change from the last two years of Covid Christmases. Enjoyable but also exhausting for this introvert.\n- These are [the songs that carried me through December](https://open.spotify.com/playlist/7rLiZKKEr9AeZ8YzrBCQQV?si=8f69179d233f4f42).\n- All my 2022 playlist songs combined into [one year-end playlist](https://open.spotify.com/playlist/1IsEP1y5qNEtDNzzcuOSlv?si=dcc9b9575ffb4615).\n\nThat's a wrap on 2022 for me. Wishing you all the very best in 2023!","src/content/changelogs/2022-12.mdoc","81f135f9a558d09f","2022-12.mdoc","2023-01",{"id":165,"data":167,"body":171,"filePath":172,"digest":173,"legacyId":174,"deferredRender":17},{"title":168,"description":169,"date":170,"published":17},"January 2023","Summary of changes for January 2023",["Date","2023-01-31T00:00:00.000Z"],"- **A11Y:** Continued UI / accessibility engineering work for a publicly traded HR software company. This month I was able to make strategic changes to the code that impacted the entire application, resolving hundreds of tickets with a single PR. Such a great feeling and win for the client. \n- **Privacy:** Finished work on updates to a cookie notice for a global SaaS provider. \n- **Guitar:** This month I learned [Hey Joe by Jimi Hendrix](https://youtu.be/cXgHEm3ReDk). I'm not playing it with my teeth or with my guitar on fire, or even with barre chords. I'm playing it mostly with open chords, but I'm taking it as a win. I'm going to be delving back into some theory and jazz standards next month. Looking forward to it.\n- **Open source:** I made no contributions to open source this month, which makes me a bit sad. Looking to contribute more this month.\n- **Permacomputing:** Devine Lu Linvega of [Hundred Rabbits](https://100r.co/) fame gave a lovely talk at [Handmade Seattle 2022](https://handmade-seattle.com/) called [\"Weathering Software Winter\"](https://youtu.be/9TJuOwy4aGA), discussing permacomputing and what it means to live and work on a boat, away from internet, in a world where software is all cloud based. Here's an excerpt:\n\n> Many of the tools that we thought we could rely on broke down, whether it is Apple products, or software that require subscription services, DRM, etc. As an artist you spend time developing a skill, you become a Photoshop illustrator. When your connection to the internet fails and that the software locks up, that skill that you thought was yours was actually entirely owned by someone, and can be taken away. Even though we've been paying for this sort of software for years, the moment that you can't have access to authenticate yourself that skill is gone. We didn't expect this, it scared us.\n\n- **TV:** Started watching [The Last of Us](https://www.imdb.com/title/tt3581920/). Never played the game. The show - and in particular Pedro Pascal - is amazing. And the latest episode with Nick Offerman is just the most wonderful blend of Station Eleven meets World War Z. Beautiful, poignant reflections on what it means to be human in the face of despair and untold loss.\n- **Music:** These are [the songs that carried me through January](https://open.spotify.com/playlist/4dPnhj1X3OyRrRX9hZOxlS?si=449fcd17e3e24da3).\n- **Other / Random:** celebrated lunar new year with my in-laws. Happy year of the rabbit! Painted the main floor of our house white. It was blue before, and giving us the blues. Feels good to start the year with a fresh coat of primer.","src/content/changelogs/2023-01.mdoc","291859b17f518bb4","2023-01.mdoc","2023-02",{"id":175,"data":177,"body":181,"filePath":182,"digest":183,"legacyId":184,"deferredRender":17},{"title":178,"description":179,"date":180,"published":17},"February 2023","Summary of changes for February 2023",["Date","2023-02-28T00:00:00.000Z"],"- Continued accessibility (a11y) development work for a publicly traded HR SaaS company. \n- Gave a presentation on micro frontend (MFE) architecture and design systems. I put some of my thoughts on these topics for large organizations in a post [here](https://nick.vanexan.ca/posts/micro-frontends).\n- Wrote a second [blog post about Web Components](https://nick.vanexan.ca/posts/web-components), on new developments in ergonomics and SSR.\n- Updated the [RSS feed](https://nick.vanexan.ca/feed.xml) of my site to include blog post entries.\n- Wrote a new Table of Contents web component for the [blog pages](https://nick.vanexan.ca/writing) on my site.\n- Saw the [Toronto Jazz Orchestra](https://thetjo.com/) perform a night of Radiohead at 3030 Dundas as part of Hugh's Room Live show. They were, as usual, fantastic.\n- I finally found a [guitar](https://www.fender.com/en-US/40th-anniversary-stratocaster-vintage-edition/0379510572.html) of my own, and this month started learning Autumn Leaves, a jazz standard.\n- These are [the songs that carried me through February](https://open.spotify.com/playlist/0Y3d7bM5xMRwqZtKkOHi3p?si=bbe2c5a65f99432e).","src/content/changelogs/2023-02.mdoc","9a4b221ca3e74c98","2023-02.mdoc","2023-03",{"id":185,"data":187,"body":191,"filePath":192,"digest":193,"legacyId":194,"deferredRender":17},{"title":188,"description":189,"date":190,"published":17},"March 2023","Summary of changes for March 2023",["Date","2023-03-31T00:00:00.000Z"],"- Continued accessibility (a11y) development work for a publicly traded HR SaaS company. I will be moving to a new role and team in April, leading UI development on an important feature for the company.\n- Spent a couple of days in [Prince Edward County](https://www.thecounty.ca/) for my partner's birthday.\n- Learned arpeggios for Autumn Leaves, and started learning [Dust Filled Room](https://youtu.be/ctXJLM-Qms4) by [Steve Gunn](https://www.steve-gunn.com/).\n- These are [the songs that carried me through March](https://open.spotify.com/playlist/5U6JAorqLpM1rbdYF3RXiK?si=32a54e621caa4905).","src/content/changelogs/2023-03.mdoc","a0b6f833bda813b4","2023-03.mdoc","2023-04",{"id":195,"data":197,"body":201,"filePath":202,"digest":203,"legacyId":204,"deferredRender":17},{"title":198,"description":199,"date":200,"published":17},"April 2023","Summary of changes for April 2023",["Date","2023-04-30T00:00:00.000Z"],"- Started a new project with a new team at the same company I've been working with for the last year. The new project has me leading UI development in a micro frontend for a new feature. \n- Came down with Covid for the first time. It was not enjoyable and dashed a lot of plans for this month.\n- Celebrated my goddaughter's first communion.\n- Guitar: continued learning how to play [Dust Filled Room](https://youtu.be/ctXJLM-Qms4) by [Steve Gunn](https://www.steve-gunn.com/).\n- These are [the songs that carried me through April](https://open.spotify.com/playlist/1LMzalP64bFiClCZzW0xtc?si=076496c0a13d4205).","src/content/changelogs/2023-04.mdoc","d2a9c66b140608b4","2023-04.mdoc","2023-05",{"id":205,"data":207,"body":211,"filePath":212,"digest":213,"legacyId":214,"deferredRender":17},{"title":208,"description":209,"date":210,"published":17},"May 2023","Summary of changes for May 2023",["Date","2023-05-31T00:00:00.000Z"],"- Continued work leading UI / feature development in a micro frontend for a publicly traded HR SaaS platform. \n- Implemented fun solutions with [react-query](https://tanstack.com/query/v3/) and [mock service worker](https://mswjs.io/).\n- Interviewed a number of developers for my client and now assisting with onboarding of a new engineer.\n- Caught up with old friends, including an old colleague from Serbia.\n- Saw [Sasha Velour live at Meridian Hall](https://tolive.com/Event-Details-Page/reference/Sasha-Velour-2023).\n- Finished learning how to play [Dust Filled Room](https://youtu.be/ctXJLM-Qms4) by [Steve Gunn](https://www.steve-gunn.com/).\n- Explored minor pentatonic scales (C#, A and D#) for soloing and bending.\n- Picked up a [Kobo e-reader](https://ca.kobobooks.com/products/kobo-clara-2e) to read library books a bit easier. It's made of recycled plastic that would otherwise be ocean-bound and is pretty awesome.\n- These are [the songs that carried me through May](https://open.spotify.com/playlist/4wAztQSMz1fhUVTIqmpjPN?si=552823e938ce463b).","src/content/changelogs/2023-05.mdoc","c02e7d67b8549ab5","2023-05.mdoc","2023-06",{"id":215,"data":217,"body":221,"filePath":222,"digest":223,"legacyId":224,"deferredRender":17},{"title":218,"description":219,"date":220,"published":17},"June 2023","Summary of changes for June 2023",["Date","2023-06-30T00:00:00.000Z"],"- Continued work leading UI / feature development in a micro frontend for a publicly traded HR SaaS platform. \n- Started exploring [Keystatic](https://keystatic.com/) by [Thinkmill](https://www.thinkmill.com.au/) for a personal project. It's pretty cool tech and uses [Markdoc](https://markdoc.dev/), which I love, under the hood. May write about it in a longer post at some point.\n- Also spent some time exploring the [Shoelace](https://shoelace.style/) web components library. It's quite good.\n- Learned how to play There Will Never Be Another You, another jazz standard, and had my last guitar lesson until the fall.\n- Spent some time with my parents and extended family.\n- Finished weeding and planting the front garden.\n- These are [the songs that carried me through June](https://open.spotify.com/playlist/506bwaxNJVn6LWsuwbirK4?si=8f339d6d48a040ec).","src/content/changelogs/2023-06.mdoc","b48602e898aa7dac","2023-06.mdoc","2023-07",{"id":225,"data":227,"body":231,"filePath":232,"digest":233,"legacyId":234,"deferredRender":17},{"title":228,"description":229,"date":230,"published":17},"July 2023","Summary of changes for July 2023",["Date","2023-07-31T00:00:00.000Z"],"- Finished my contract work leading UI / feature development of a micro frontend for a publicly traded HR SaaS platform. Helped my team get their MVP HR ticketing solution shipped and out the door for customer feedback, complete with documentation and knowledge transfer for the UI devs I helped hire. With that, my contract has come to an end. I'm planning on taking some time off in August to reboot and fix some things around the house, and look forward to building more fun things in September!\n- Attended a large family BBQ at my dad's in Bobcaygeon.\n- These were [the songs that carried me through July](https://open.spotify.com/playlist/3SQBEk7RQK67tEQOjo7AWT?si=8bef39ec644b4f4c).","src/content/changelogs/2023-07.mdoc","f16a521d2598a6bd","2023-07.mdoc","2023-08",{"id":235,"data":237,"body":241,"filePath":242,"digest":243,"legacyId":244,"deferredRender":17},{"title":238,"description":239,"date":240,"published":17},"August 2023","Summary of changes for August 2023",["Date","2023-08-31T00:00:00.000Z"],"- Took some time off this month to fix some things around the house. Also spent a bunch of time catching up with people we missed during the winter and the pandemic.\n- September is just around the corner, and I'm really excited to get back to coding and a regular work routine more generally.\n- Found a very nice collection of [short docs of Berlin Bike Messengers](https://www.youtube.com/watch?v=dfXBTUYNRz0&list=PLkoL530rRZy-MK0Szsn_Z-AiEHsNps-gj&index=6) by [Claire Tayler](https://www.instagram.com/de.tour/). I really do miss that city. 😔\n- These were [the songs that carried me through August](https://open.spotify.com/playlist/58ZauUIFKRes17ccQfp94o?si=5a3eb9d5966d4777).","src/content/changelogs/2023-08.mdoc","b0eac7b4d9dc5d10","2023-08.mdoc","2023-09",{"id":245,"data":247,"body":251,"filePath":252,"digest":253,"legacyId":254,"deferredRender":17},{"title":248,"description":249,"date":250,"published":17},"September 2023","Summary of changes for September 2023",["Date","2023-09-30T00:00:00.000Z"],"- My dad suffered a detached retina at the beginning of the month, so I spent the first half of the month up north doing some care-giving.\n- Deep diving into [Blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor) for UI development for a new project.\n- These were [the songs that carried me through September](https://open.spotify.com/playlist/4Wki8eXht690vNuNvaH6QV?si=792b191b6f7f4ca4).","src/content/changelogs/2023-09.mdoc","67dcf0486a4fbddf","2023-09.mdoc","2023-10",{"id":255,"data":257,"body":261,"filePath":262,"digest":263,"legacyId":264,"deferredRender":17},{"title":258,"description":259,"date":260,"published":17},"October 2023","Summary of changes for October 2023",["Date","2023-10-31T00:00:00.000Z"],"- Started work on a new contract for a Canadian provincial government to modernize their student loan application process. This is a .NET project, which takes me out of my usual [React](https://react.dev/) work and has me coding almost exclusively in [C#](https://learn.microsoft.com/en-us/dotnet/csharp/) to build a [Blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor) server application. I am accumulating a lot of knowledge of this relatively immature ecosystem, which I hope to share in a longer-form [blog](https://nick.vanexan.ca/writing) post one day.\n- For the first time since the Covid pandemic started, I hopped on my bike and attended a tech meetup downtown. I went to the [StorybookTO](https://www.eventbrite.com/e/storybookto-tickets-723983593417) meetup in Toronto. A great event with great presentations on the ways organizations like [Rangle.io](https://rangle.io/) and [Wealthsimple](https://www.wealthsimple.com/) are leveraging [Storybook](https://storybook.js.org/) in their workflows. I learned a lot and met some great people and overall hope to do more meetups in the coming year. \n    - [Stephanie Zeng](https://www.linkedin.com/in/stephaniezeng/) from [Rangle.io](https://rangle.io/) presented on \"story-driven\" development, which is an interesting variation on TDD for modern UI development. \n    - [Seth Davenport](https://www.linkedin.com/in/seth-davenport) talked about UI testing at [Wealthsimple](https://www.wealthsimple.com/). He gave a great talk on how his teams are using [Chromatic](https://www.chromatic.com/) and [Storybook](https://storybook.js.org/) to drive snapshot tests, a11y tests, documentation generation and test coverage, all while conceding that innovation in the tool chain matter less than innovation in the product (i.e. should be in service of the product). \n    - Finally, [Varun Vachhar](https://www.linkedin.com/in/varunvachhar/) talked about using Chromatic's new Modes feature for testing. Modes sit above globals and can be used to test components in a number of different \"mode\" scenarios (localization, dark mode, etc.).\n- I went to the premiere of [The Great Canadian Baking Show](https://www.cbc.ca/life/greatcanadianbakingshow) new season at HotDocs. My partner, Carmen, is a photographer and she shot the cast and bakers for their various media. It was a very fun and sweet and wholesome evening. \n- These were [the songs that carried me through October](https://open.spotify.com/playlist/2OF4nTmg6dv4R9hcxGML1t?si=a9e732dc576c43d7).","src/content/changelogs/2023-10.mdoc","9b689c52e53c630c","2023-10.mdoc","2023-11",{"id":265,"data":267,"body":271,"filePath":272,"digest":273,"legacyId":274,"deferredRender":17},{"title":268,"description":269,"date":270,"published":17},"November 2023","Summary of changes for November 2023",["Date","2023-11-30T00:00:00.000Z"],"- Continued work on the modernization of a student loan application for a Canadian provincial government. The project is a .NET&nbsp;[Blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor)&nbsp;server application, so I've been continuing my journey in building UI in&nbsp;[C#](https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/).\n- Travelled to Chile for 10 days with my partner. We travelled to Punta Arenas and saw penguins on&nbsp;[Magdalena Island](https://en.wikipedia.org/wiki/Magdalena_Island,_Magallanes_Region); to Puerto Natales and day-hiked in&nbsp;[Torres del Paine](https://en.wikipedia.org/wiki/Torres_del_Paine_National_Park)&nbsp;park (incl. the Mirador Las Torres hike); to San Pedro de Atacama and saw the&nbsp;[Valle de la Luna](https://en.wikipedia.org/wiki/Valle_de_la_Luna_\\(Chile\\)), the&nbsp;[El Tatio Geysers](https://en.wikipedia.org/wiki/El_Tatio)&nbsp;and&nbsp;[Laguna Cejar](https://en.wikipedia.org/wiki/Salar_de_Atacama); and to Santiago where we enjoyed the city and nearby&nbsp;[Valparaíso](https://en.wikipedia.org/wiki/Valpara%C3%ADso). I'm hoping over the holidays to write a few longer-form posts about our experience.\n- These were&nbsp;[the songs that carried me through November](https://open.spotify.com/playlist/1wW89a34t2AVBtLRWEPm9C?si=3040b479d22a46bb).","src/content/changelogs/2023-11.mdoc","bf2a55ceeb9551b8","2023-11.mdoc","2023-12",{"id":275,"data":277,"body":281,"filePath":282,"digest":283,"legacyId":284,"deferredRender":17},{"title":278,"description":279,"date":280,"published":17},"December 2023","Summary of changes for December 2023",["Date","2023-12-31T00:00:00.000Z"],"- Continued work on the modernization of a student loan application for a Canadian provincial government. The project is a .NET&nbsp;[Blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor)&nbsp;server application, so I've been continuing my journey in building UI in&nbsp;[C#](https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/).\n- Finally watched [The Bear](https://www.imdb.com/title/tt14452776/). It's amazing. And so much more than I thought it would be. Ostensibly a kitchen drama. Actually a show about trauma and adult children of addicts / parents with mental health issues.\n- Subluxated my shoulder in a cycling accident, attempting to avoid a car parked in the middle of the road.\n- These are [the songs in my rotation in December](https://open.spotify.com/playlist/0qEkM0AecEZ2yX4mrfjhCI?si=53d67275b5a048ea).","src/content/changelogs/2023-12.mdoc","405d5ba82ddf3211","2023-12.mdoc","2024-01",{"id":285,"data":287,"body":291,"filePath":292,"digest":293,"legacyId":294,"deferredRender":17},{"title":288,"description":289,"date":290,"published":17},"January 2024","Summary of changes for January 2024",["Date","2024-01-31T00:00:00.000Z"],"- Continued work on the modernization of a student loan application for a Canadian provincial government. The project is a .NET&nbsp;[Blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor)&nbsp;server application, so I've been continuing my journey in building UI in&nbsp;[C#](https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/).\n- A very busy month socially. Visits with my parents, my partner's parents, my sister's family and a bunch of close friends.\n- Attended a couple of my nephew's soccer games. Amazing to see the progression.\n- Went to the Art Gallery of Ontario to check out the [KAWS:Family](https://ago.ca/exhibitions/keith-haring-art-everybody) and [Keith Haring](https://ago.ca/exhibitions/keith-haring-art-everybody) exhibits. Delicious, both of them.\n- Started physio for my subluxated shoulder. Not an injury I'd recommend getting.\n- These were [the songs in my rotation in January](https://open.spotify.com/playlist/1gW70qezBTt1s3eTMURn6v?si=d6d1dda6f2bb476d). A [Way Forward by Nation of Language](https://open.spotify.com/album/2hPnsq6HZHcgkFlLclKrvv?si=BuAUZ8TuTNaa8XIwj59CMg) is an eminently listenable album.\n\n![From the KAWS:Family exhibit at the AGO](/images/changelogs/2024-01/168A0EDA-D3EA-4FCF-8DE6-C3C862FAF6E8_1_105_c.webp)","src/content/changelogs/2024-01.mdoc","3aa12c851a20ba43","2024-01.mdoc","2024-02",{"id":295,"data":297,"body":301,"filePath":302,"digest":303,"legacyId":304,"deferredRender":17},{"title":298,"description":299,"date":300,"published":17},"February 2024","Summary of changes for February 2024",["Date","2024-02-29T00:00:00.000Z"],"- It was a busy month of work. I continue work on the modernization of a student loan application system for a Canadian provincial government. The project is a .NET [Blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor) server application, so I've been continuing my journey in building UI in [C#](https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/).\n- I wrote a [blog post](https://nick.vanexan.ca/posts/blazor-a-review-and-primer-for-ui-devs) about my experience with [Blazor](https://learn.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-8.0) so far. TLDR: it's pretty good, also I still miss JS 😄.\n- I migrated my website to Astro, and wrote another [blog post](https://nick.vanexan.ca/posts/astro-keystatic-markdoc) about my experience with [Astro](https://astro.build/) + [Markdoc](https://markdoc.dev/) + [Keystatic](https://keystatic.com/)\n- I got to see [Brittany Howard](https://www.brittanyhoward.com/) at the [Danforth Music Hall](https://thedanforth.com/) thanks to our amazing friend Cody.\n- Finished final scheming on birthday plans for my partner next month 🤫\n- These were [the songs in my rotation in February](https://open.spotify.com/playlist/7pwfXHRgI7YhI3SYEFPhWp?si=f3be0172340f468e).\n\n![Brittany Howard at the Danforth Music Hall](/images/changelogs/2024-02/16509F81-9CAF-4306-8F29-4C4EB4CAA871_1_105_c.jpeg)","src/content/changelogs/2024-02.mdoc","28f41f54d2e6056f","2024-02.mdoc","2024-03",{"id":305,"data":307,"body":311,"filePath":312,"digest":313,"legacyId":314,"deferredRender":17},{"title":308,"description":309,"date":310,"published":17},"March 2024","Summary of changes for March 2024",["Date","2024-03-29T00:00:00.000Z"],"- March was a very busy month at work. A couple of my colleagues were away for March break and so it was just me and another teammate holding down the fort a bit, so to speak. We had a lot of fun and still a great sprint demo.\n- I learned this month that my current contract will be extended for another year. The project is a .NET [Blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor) server application, which has me building UI in [C#](https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/). It's been a great learning experience for me, and is contributing to my growth as a developer. I'm feeling very grateful for the opportunity to continue working with this team.\n- This month marked my partner's 40th birthday. I and a couple of close friends planned a big surprise bash for her, with 65 of her closest friends and a bit of family gathered at [Boxcar Social Riverside](https://boxcarsocial.ca/pages/riverside) for a night of drinks, laughs and a bit of dancing.\n- These are [the songs ](https://open.spotify.com/playlist/5zzQPBMwjcDMFmtO0d63PN?si=36151bfed05d46d0)that we partied to, and that I listened to most in March.\n- Those were the highlights, see you next month ✌️\n\n![Celebrating Carm's 40th](/images/changelogs/2024-03/IMG_7350.jpeg)","src/content/changelogs/2024-03.mdoc","7a52035e0eb6f71e","2024-03.mdoc","2024-05",{"id":315,"data":317,"body":321,"filePath":322,"digest":323,"legacyId":324,"deferredRender":17},{"title":318,"description":319,"date":320,"published":17},"May 2024","Summary of changes for May 2024",["Date","2024-06-29T00:00:00.000Z"],"- A month of work, mostly. I'm still working for a Canadian provincial government on a set of [Blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor) server applications. We passed a big feature milestone and are now moving on to some newer features, which is exciting.\n- Social gatherings with my parents and in-laws around Mother's day.","src/content/changelogs/2024-05.mdoc","ae3fe5d96a3e3d89","2024-05.mdoc","2024-06",{"id":325,"data":327,"body":331,"filePath":332,"digest":333,"legacyId":334,"deferredRender":17},{"title":328,"description":329,"date":330,"published":17},"June 2024","Summary of changes for June 2024",["Date","2024-07-01T00:00:00.000Z"],"- Another busy month at work. We pushed through some features that involved giving our users more views of their data.\n- Lots of social visits with family and friends. Summer social calendar is in full swing. I have a love / hate relationship with this time of year. Love the weather. Love seeing some folks. Hate feeling like every weekend is claimed for a social activity. We introverts need a bit more downtime.\n- Will be travelling to Hong Kong / China / Japan later this year, so started some planning for that. Feeling excited!\n- These were [the songs I listened to in June](https://open.spotify.com/playlist/7wK5JQvZ3qy2Z8WgHBuDE9?si=423b6d8cea3644b4).","src/content/changelogs/2024-06.mdoc","2e88f2542a196c69","2024-06.mdoc","2024-07",{"id":335,"data":337,"body":341,"filePath":342,"digest":343,"legacyId":344,"deferredRender":17},{"title":338,"description":339,"date":340,"published":17},"July 2024","Summary of changes for July 2024",["Date","2024-09-04T00:00:00.000Z"],"- Work: I continue work on the modernization of a student loan application for a Canadian provincial government. The project is a .NET&nbsp;[Blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor)&nbsp;server application, so I've been continuing my journey developing in&nbsp;[C#](https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/).&nbsp;Enjoying it.\n- Website: I added a new [Fragments](https://nick.vanexan.ca/fragments) and [Photos](https://nick.vanexan.ca/photos) section to my website.\n- Lots of visits with friends and family.\n- My monthly [playlist for July](https://open.spotify.com/playlist/0jUaZTaJke6kXOaiHXnm5N?si=5261d07749fa4760)","src/content/changelogs/2024-07.mdoc","a13ecd7af2c34fd6","2024-07.mdoc","2024-04",{"id":345,"data":347,"body":351,"filePath":352,"digest":353,"legacyId":354,"deferredRender":17},{"title":348,"description":349,"date":350,"published":17},"April 2024","Summary of changes for April 2024",["Date","2024-05-02T00:00:00.000Z"],"- I continued work on the modernization of a student loan application for a Canadian provincial government. The project is a .NET&nbsp;[Blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor)&nbsp;server application, so I've been continuing my journey in building UI in&nbsp;[C#](https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/). I'm feeling a lot more productive in this tech stack this month.\n- For some technical reasons I had to buy a Windows laptop for my contract this month. I purchased a [Lenovo X1 Carbon Gen 11](https://www.lenovo.com/ca/en/p/laptops/thinkpad/thinkpadx1/thinkpad-x1-carbon-gen-11-\\(14-inch-intel\\)/len101t0049). I have feelings about it. I prefer linux / unix environments. And I have loved my 2021 M1 Macbook Air, as it's lightweight, performant, and I can code on battery for ~15 hours. On this Intel Windows machine, I am finding ~~4-6~~ 2-4 hours is about what it can handle. Which is awful. Overall I'm happy with the development experience in Visual Studio for .NET, which I can only get on Windows, so that's been one benefit. But I can't believe how behind Intel is compared to Apple on processors. And what I really wanted was a linux-based [System76 Lemur Pro](https://system76.com/laptops/lemur) . So, yeah, feelings of disappointment all round on this one I guess.\n- I turned 40. That fact plus my new Windows laptop has me feeling a bit like Richie from [The Bear](https://www.imdb.com/title/tt14452776/) post-[forks episode](https://variety.com/2023/tv/columns/the-bear-season-2-richie-episode-forks-1235651951/).\n\n![Richie from The Bear telling Sydney he wears suits now](/images/changelogs/2024-04/image.png)","src/content/changelogs/2024-04.mdoc","077ceb9a0a7a15c1","2024-04.mdoc","2024-08",{"id":355,"data":357,"body":361,"filePath":362,"digest":363,"legacyId":364,"deferredRender":17},{"title":358,"description":359,"date":360,"published":17},"August 2024","Summary of changes for August 2024",["Date","2024-09-05T00:00:00.000Z"],"- I continue work on the modernization of a student loan application for a Canadian provincial government. The project is a .NET&nbsp;[Blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor)&nbsp;server application, so I've been continuing my journey working full stack in&nbsp;[C#](https://learn.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/).&nbsp;\n- Celebrated my in-laws' 50th wedding anniversary, and our own 10th wedding anniversary.\n- Celebrated my best friend's 40th birthday with a nice dinner at [Grey Gardens](https://greygardens.ca/), a gem of a restaurant tucked away in [Kensington Market](https://en.wikipedia.org/wiki/Kensington_Market).\n- Celebrated my dad and niece's birthdays (a lot of celebrations this month!)\n- Spent some time in the [Kawartha Lakes](https://en.wikipedia.org/wiki/Kawartha_Lakes) region visiting my parents.\n- Started reading&nbsp;[A Philosophy of Software Design](https://www.goodreads.com/book/show/39996759-a-philosophy-of-software-design)&nbsp;by John Ousterhout. It's very good, and very applicable to me now that I'm working in a C# codebase. I wish a book like this existed earlier in my career. Will post a more in-depth review about it later.\n- Started renting a [new studio space](https://nick.vanexan.ca/fragments/new-spaces) for work. Enjoying it so far.\n- Started preparations for [Brew Tour 2024](https://nick.vanexan.ca/fragments/brew-tour-2024).\n- My monthly [playlist for August 2024](https://open.spotify.com/playlist/381QlefGJktcHAVyfO8IYO?si=642e042582274461).","src/content/changelogs/2024-08.mdoc","ffc0290bb1360e01","2024-08.mdoc","fragments",["Map",367,368,377,378,387,388,397,398,407,408,417,418,427,428,437,438,447,448,457,458,467,468,477,478,487,488,498,499],"backing-fields",{"id":367,"data":369,"body":373,"filePath":374,"digest":375,"legacyId":376,"deferredRender":17},{"title":370,"description":371,"date":372,"published":17},"Backing Fields","Resolving null reference errors for new properties in existing CosmosDB documents",["Date","2024-07-25T00:00:00.000Z"],"I learned a quick trick this week re how to resolve null reference errors when you add new properties to an existing CosmosDB document class. Let's say you have an existing BaseEntity class that needs two new properties added for CreatedDate and CreatedBy. If you add those properties to your class definition, you'll get null reference errors for your existing data that is missing those properties. But you can fix the issue with backing fields like so...\n\n```csharp\npublic abstract class BaseEntity {\n\n    // … other existing props\n\n    public DateTimeOffset CreatedDate { get => _createdDate ?? new DateTimeOffset(); set => _createdDate = value; }\n\n    private DateTimeOffset? _createdDate;\n\n    public string CreatedBy { get => _createdBy ?? string.Empty; set => _createdBy = value; }\n\n    private string? _createdBy;\n\n}\n```","src/content/fragments/backing-fields.mdoc","185799217628c167","backing-fields.mdoc","brew-tour-2024",{"id":377,"data":379,"body":383,"filePath":384,"digest":385,"legacyId":386,"deferredRender":17},{"title":380,"description":381,"date":382,"published":17},"Brew Tour 2024","A sometimes annual tradition returns",["Date","2024-09-05T00:00:00.000Z"],"Way back in 2018 I was working on a project that hit what some of us in the consulting world may refer to as \"The Valley of Despair\".\n\nIn short, the exit of an important project sponsor, coupled with terrible suggestions by one of the Big 4 consulting firms, resulted in our team running head first into the sobering ennui of corporate bureaucracy and dead-end architectural demands.\n\nSo I took our team drinking for a day.\n\nI had just moved to the East End. There are lots of breweries in the area that I was eager to try, so we all took a Friday off and went on a little pub crawl to a number of the breweries in the area. It was never intended to be an annual event, or an event at all. But some folks found out about it and found value in the debauchery. So it's become a sometimes annual tradition now, and this year we'll be doing it again for the 5th time.\n\nThis year I've made custom stamps for each of the breweries, as well as one generic one for any other bar we go to along the way. I drew and traced the logos of the various breweries in Figma, then sent them over to [Kid Icarus](https://kidicarus.ca/) in [Kensington Market](https://en.wikipedia.org/wiki/Kensington_Market) to have them created. I just got them back and could not be more happy with the results...\n\n![Testing my brewery tour stamps from Kid Icarus](/images/fragments/brew-tour-2024/IMG_3147.jpeg)\n\nI'm getting little passport sized notebooks for everyone, and then I will stamp their notebooks at each checkpoint / stop on our crawl. Those who make it to our final destination with the most stamps will receive the prize of glory and the worst hangover imaginable.","src/content/fragments/brew-tour-2024.mdoc","65ffd8ccb484c29f","brew-tour-2024.mdoc","first-fragment",{"id":387,"data":389,"body":393,"filePath":394,"digest":395,"legacyId":396,"deferredRender":17},{"title":390,"description":391,"date":392,"published":17},"First Fragment","An attempt to write more (by writing less)",["Date","2024-07-02T00:00:00.000Z"],"Hello, world! This is my first fragment. What's a fragment? It's a short piece of writing that doesn't merit a longer form article.\n\nWhy did I make a separate section of my site for fragments? Good question. I recently came across [@brandur's website](https://brandur.org/), and was inspired by their own atoms and fragments sections. Truth is… I'm a terrible blogger. Every now and then I'm inspired to write a longer form [article](https://nick.vanexan.ca/articles), usually about something technical. But often I lack time or energy for long-form writing. I still have a lot of notes, thoughts, musings, etc. that I often want to stash and share somewhere though. So my hope is by having a separate section for shorter-form snippets, I might write more, by writing less. And these fragments may help crystallize thoughts for a later longer form piece. Or they may just be like tweets. Either way, here we are.\n\nI've decided to include fragments in my [RSS feed](https://nick.vanexan.ca/feed.xml), along with [articles](https://nick.vanexan.ca/articles) and [changelogs](https://nick.vanexan.ca/changelog). So you'll find them there. And here, of course. See you in the next one! ✌️","src/content/fragments/first-fragment.mdoc","14d4a78eb2797e09","first-fragment.mdoc","data-structures",{"id":397,"data":399,"body":403,"filePath":404,"digest":405,"legacyId":406,"deferredRender":17},{"title":400,"description":401,"date":402,"published":17},"Data Structures","Some thoughts on data structures vs. code",["Date","2024-08-17T00:00:00.000Z"],"Saw this article on HN the other day: [Good programmers worry about data structures and their relationships](https://read.engineerscodex.com/p/good-programmers-worry-about-data)\n\nThis quote from the article expresses the TLDR well:\n\n> Data is more tractable than program logic. It follows that where you see a choice between complexity in data structures and complexity in code, choose the former. More: in evolving a design, you should actively seek ways to shift complexity from code to data.\n\nI agree with the title and substance of the article. And have seen it in practice.\n\nIn fact, this article came across my screen right at a time that our team had received news about requirements that, at first glance, were surprising. For confidential reasons, I can't disclose much, but I can make some analogies.\n\nLet's say that for one section of our app our team was initially told the pages concerned the management of a model of car over a period of time. But then we learned the company doesn't think about its management processes in that way. They never care about the management of a model of car on its own; they care about the management of a *portfolio* of *vehicles* (cars, trucks, vans, etc.) for a given time period. And the addition or substraction of new vehicles to, as well as their order in, that portfolio, has impacts on costing and budgeting calculations that have to be redone whenever vehicles are shuffled in and out of the portfolio for a given time period. So now the software doesn't just concern the management of Model A. It's about the management of Model A, B, C, D, etc. and their costing impacts on each other over time.\n\nCool. No problem.\n\nThis new set of requirements wasn't something we had been building or specifically planned for. But we were able to say to the client \"Cool. No problem.\" because smart senior engineers on our project had already thought enough about the domain model and what the client would generally be wanting to achieve that they structured the data in such a way that could accommodate this request easily. We might have to change how we think about the UI / UX of this section of the app (*i.e.* the code), but the underlying data structures and the relationships and sequencing between objects (in a linked list kind of way), coupled with a clean code architecture, made it easy to accommodate this shift.","src/content/fragments/data-structures.mdoc","25cfa8b047e82b36","data-structures.mdoc","degenerative-myelopathy",{"id":407,"data":409,"body":413,"filePath":414,"digest":415,"legacyId":416,"deferredRender":17},{"title":410,"description":411,"date":412,"published":17},"Degenerative Myelopathy","A terrible dog disease I'm just learning about",["Date","2024-08-22T00:00:00.000Z"],"![](/images/fragments/degenerative-myelopathy/image.png)\n\nWe recently learned our [George](https://www.instagram.com/georgevancheung/) has what appears to be the early stages of [Degenerative Myelopathy](https://en.wikipedia.org/wiki/Canine_degenerative_myelopathy). It is a progressive disease of the spinal cord, a kind of canine ALS. It is not curable. And it puts his potential remaining time with us into sharp focus. We are going to try some physio therapy but overall the prognosis is we maybe have a year or so left with him. This is, of course, the contract with dogs. They age much faster than us. So we are trying to focus on the good times for the remaining time we have left. But this disease is [difficult to observe](https://www.youtube.com/watch?v=ezYqUJTbAL0). My heart is heavy.","src/content/fragments/degenerative-myelopathy.mdoc","d4dab271c0636087","degenerative-myelopathy.mdoc","get-there-itis",{"id":417,"data":419,"body":423,"filePath":424,"digest":425,"legacyId":426,"deferredRender":17},{"title":420,"description":421,"date":422,"published":17},"Get-There-Itis","Rushing and Plan Continuation Bias",["Date","2024-07-09T00:00:00.000Z"],"Our team had a bit of a rough end to our sprint today. There were several factors at play but during our retro one of our teammates raised the issue of [plan continuation bias](https://medium.com/building-the-agile-business/avoiding-plan-continuation-bias-7ebcd415cb67) and its cousin \"[get-there-itis](https://www.flyaoamedia.com/flight-simulator/get-there-itis-the-un-awesome-pilot-killer/)\", a phenomenon pilots know well, which involves the myopic focus on getting to a destination on time, come hell or high water. My colleague shared us these links. They contain some useful lessons. This one in particular provoked a head nod:\n\n> Truly agile processes celebrate change even late in a process, but they also celebrate learning. Simple human biases have the potential to totally derail projects and initiatives, but so does blindly following algorithms and machine-driven outputs. It’s so important for teams to regularly check-in with each other. To have the humility to recognise when they have gaps in knowledge. But also to have the will and the critical thinking to question and challenge, and the openness to explore, look around them and adapt where necessary. When so much of what we do is informed by data and algorithms this is more important than ever.\n\nSo I'm sharing these links also with you, dear reader, in the hopes that you, too, may avoid *get-there-itis* and arrive at your destination - whatever that may be for you - safely and soundly.","src/content/fragments/get-there-itis.mdoc","604222e654acc55d","get-there-itis.mdoc","new-spaces",{"id":427,"data":429,"body":433,"filePath":434,"digest":435,"legacyId":436,"deferredRender":17},{"title":430,"description":431,"date":432,"published":17},"New Spaces","Hello from my new studio",["Date","2024-08-10T00:00:00.000Z"],"I started renting a studio space this month. I love WFH, don't get me wrong. And I don't want to commute to client offices. But it's nice to have a space in a less than 10 minute bike ride from my house to come and do work without the distractions of home. And it's nice to run into other humans navigating freelance life. Or so is my hypothesis. Will see how this experiment goes.\n\n![View of the Toronto skyline from my studio](/images/fragments/new-spaces/IMG_3047.jpeg)","src/content/fragments/new-spaces.mdoc","60b310bb2c73ee55","new-spaces.mdoc","jazz-at-night",{"id":437,"data":439,"body":443,"filePath":444,"digest":445,"legacyId":446,"deferredRender":17},{"title":440,"description":441,"date":442,"published":17},"Jazz at Night","Bluesy vibes for work and downtime",["Date","2024-08-23T00:00:00.000Z"],"I've been enjoying the album [Jazz at Night](https://open.spotify.com/album/7cjqOoWOgTfdrmTeUjvh4u?si=oQV5-dWxRqqSPeuyr11AKw) by Hudson Harris & Haim and the Tate Jackson Trio while at work and in the evenings. The vibes are bluesy and great.","src/content/fragments/jazz-at-night.mdoc","f034f60c8b0b1b49","jazz-at-night.mdoc","taskwarrior-hooks",{"id":447,"data":449,"body":453,"filePath":454,"digest":455,"legacyId":456,"deferredRender":17},{"title":450,"description":451,"date":452,"published":17},"Taskwarrior Hooks","How to auto-remove next tags on task completion",["Date","2025-04-25T00:00:00.000Z"],"I use [Taskwarrior ](https://taskwarrior.org/)for task management. One nice feature in Taskwarrior is if you add a \"next\" tag to a task (+next), it puts it at the top of your active task list in yellow. If you complete the task, however, the tag of \"next\" remains in the history of the task. This doesn't make sense, as next is a tag that is really only relevant in the context of your working / active tasks, not completed tasks.\n\nManually removing the next tag before completing a task is a chore, so I wrote a hook to automate it:\n\n```python\n#!/usr/bin/env python3\nimport json\nimport sys\n\ntry:\n    input_stream = sys.stdin.buffer\nexcept AttributeError:\n    input_stream = sys.stdin\n\n# Read original and modified tasks from stdin\nold = json.loads(input_stream.readline().decode(\"utf-8\", errors=\"replace\"))\nnew = json.loads(input_stream.readline().decode(\"utf-8\", errors=\"replace\"))\n\n# If status changed to completed, remove the 'next' tag\nif new.get(\"status\") == \"completed\" and \"tags\" in new:\n    if \"next\" in new[\"tags\"]:\n        new[\"tags\"].remove(\"next\")\n\n# Output the modified task\nprint(json.dumps(new))\n\n```\n\nTo make use of the hook, save it in a file:\n\n```\n~/.task/hooks/on-modify.remove_next_on_done.py\n```\n\nAnd don't forget to make the file executable:\n\n```\nchmod +x ~/.task/hooks/on-modify.remove_next_on_done.py\n```\n\nAnd just like that, the +next tag will be removed automagically when you complete your task.","src/content/fragments/taskwarrior-hooks.mdoc","7f4f95c91c3c92ad","taskwarrior-hooks.mdoc","photos",{"id":457,"data":459,"body":463,"filePath":464,"digest":465,"legacyId":466,"deferredRender":17},{"title":460,"description":461,"date":462,"published":17},"Photos","More new things on this old site",["Date","2024-07-04T00:00:00.000Z"],"I added a new [photos](https://nick.vanexan.ca/photos) section to my site. Clicking on an image brings you to a more detailed view of the photo and write-up. My [first post](https://nick.vanexan.ca/photos/salar-de-atacama-2023) was from my trip to Chile in 2023, of the salt flats in the Atacama Desert. I plan to add more over time but thought I'd start there.","src/content/fragments/photos.mdoc","5f77ff51fb6590de","photos.mdoc","the-new-internet",{"id":467,"data":469,"body":473,"filePath":474,"digest":475,"legacyId":476,"deferredRender":17},{"title":470,"description":471,"date":472,"published":17},"The New Internet","Small. Trusted. Human-Scale Networks.",["Date","2024-08-02T00:00:00.000Z"],"Happened upon [this blog post](https://tailscale.com/blog/new-internet) by Avery Pennarun, CEO of [Tailscale](https://tailscale.com). I love Tailscale. It's a wonderfully well executed product. Reading this post, I now have a better understanding why I'm vibing with this company. Some excerpts...\n\n> As an industry, we’ve spent all our time making the hard things possible, and none of our time&nbsp;[making the easy things easy](https://www.amazon.com/Learning-Perl-Making-Things-Possible/dp/1491954329).\n\n> The Internet is for everyone. You know, there were internetworks (lowercase) before the Internet (capitalized). They all lost, because the Internet was the most diverse and inclusive of all. To the people building the Internet, nothing mattered but getting everyone connected. Adoption was slow at first, then fast, then really fast, and today, if I buy a wristwatch and it doesn’t have an Internet link, it’s broken.\n> \n> We won’t have built a New Internet if nerds at home can’t play with it. Or nerds at universities. Or employees at enterprises. Or, you know, eventually every person everywhere.\n\nHere's to [The New Internet](https://tailscale.com/blog/new-internet).","src/content/fragments/the-new-internet.mdoc","0de16e5947352f40","the-new-internet.mdoc","tokyo-focus-tracks",{"id":477,"data":479,"body":483,"filePath":484,"digest":485,"legacyId":486,"deferredRender":17},{"title":480,"description":481,"date":482,"published":17},"Tokyo Focus Tracks","Soundscapes for focus, from the world's best Metro",["Date","2025-04-23T00:00:00.000Z"],"Last November I visited Japan for the first time. Tokyo, and in particular its metro system, really blew me away. Trains are always on time. They are clean. They are quiet. People queue patiently. They wait for you to exit before entering. Stations have their own music. Birdsong plays to keep people calm while waiting. It's incredible.\n\nSo, imagine how delighted I was to learn that the good folks at [iA](https://ia.net/) - a software company I really respect and admire - had released some ambient focus tracks with various Tokyo metro lines as part of the soundscape! They have released three so far:\n\n- [Tokyo Focus Track 01 - Keihin Tohoku Line](https://youtu.be/u59aOb-SDfc?si=Te-KhmmStzppwnMP)\n- [Tokyo Focus Track 02 - Yamanote Line](https://youtu.be/w913VyhFTbE?si=IONXyKprh14pUmeR)\n- [Tokyo Focus Track 03 - Narita Sky Access](https://youtu.be/uF3P1g7u81E?si=aLgriykBapRnx-fa)\n\nYou can learn more about their project [on their blog](https://ia.net/topics/tokyo-focus-tracks).\n\nI love these so much. They rekindle fond memories. Maybe you'll enjoy them too.","src/content/fragments/tokyo-focus-tracks.mdoc","ea5e87121d1a288c","tokyo-focus-tracks.mdoc","ux-performance-in-blazor",{"id":487,"data":489,"body":494,"filePath":495,"digest":496,"legacyId":497,"deferredRender":17},{"title":490,"description":491,"date":492,"published":493},"UX Performance in Blazor","The Honeymoon Is Over",["Date","2024-10-05T00:00:00.000Z"],false,"A while back I wrote a longer [article](https://nick.vanexan.ca/posts/blazor-a-review-and-primer-for-ui-devs) summarizing some of my key thoughts approaching Microsoft's [Blazor](https://learn.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-8.0) technology as a UI developer who has spent most of his career in the JS / TS ecosystem. The more I've worked with Blazor, the more I've been enjoying the developer experience (DX). But recently, I'm coming across some really poor user experience (UX) outcomes in production, and I'm worried that Blazor is making the wrong trade-offs between DX and UX.\n\nIn our project, we're using Blazor server. So all of the user interaction is mediated via signalR. You type, the signal is sent via signalR to the server, the server returns your new state. The problem is that the performance of this architecture can't keep up with the speed of user input entry on the front-end. The user types too fast, or clicks too fast, and a delta emerges between what the user thinks its current state should be and what the server thinks the state should be, resulting in outcomes like laggy typing or caret movements within text fields.\n\nI should say, these experiences are not immediately visible in smaller applications or simple interfaces, and aren't visible when running Blazor server apps locally. But they become visible in prod, when your app is deployed to Azure and is using the Azure signalR service. This is what we've discovered after switching our local instance to use Azure signalR service.\n\nI'm working through this issue now, and running into what seems like a fundamental design flaw. An example from this [GitHub issue](https://github.com/dotnet/aspnetcore/issues/14242).\n\n![](/images/fragments/ux-performance-in-blazor/image.png)\n\nThe rub here is in the first paragraph. If the framework is not suited to high frequency events like... typing really fast... I mean what is its use generally? Why make this at all? Of course you can't bend the laws of physics. So why make all user interaction intermediated by signalR?\n\nI'm just at the beginning of a journey into fixing issues arising from this for the project I'm on, so this post is admittedly and knowingly spicy. Cooler Nicks will prevail. And I'll post some notes on how we mitigate these issues when I'm out of my foxhole. But for now, given that I didn't get to choose Blazor Server for this project, I'm definitely a bit displeased to have to be in this position at all. The honeymoon period with Blazor is over, and I'm back to looking longingly at Next.JS.","src/content/fragments/ux-performance-in-blazor.mdoc","0a8a5bf24b04316f","ux-performance-in-blazor.mdoc","work-places",{"id":498,"data":500,"body":504,"filePath":505,"digest":506,"legacyId":507,"deferredRender":17},{"title":501,"description":502,"date":503,"published":17},"Work places","On being an itinerant developer",["Date","2024-07-06T00:00:00.000Z"],"Most days I head to a coffee shop for a couple of hours of work. If I'm having trouble getting started on something, I might go earlier in the day. But usually I go in the afternoon after a productive morning. I'm an itinerant worker. I always have been. There is something important about the place I do work, for my energy, focus, etc. I like my home enough. And I don't miss the before times when I had to go to a client's office every day. Those offices were often the worst places to work productively. But I also don't love working from home all day, and I'm not sure how others do it. I find it unhealthy. My brain needs new environments to work from to do its best work. And I personally need to feel like I'm in a society, a part of it, colliding with it, to feel happy. It's why I live in a city (an expensive one!). Even if I am ultimately opening up a laptop and crawling into a focus zone. The irony. 😂","src/content/fragments/work-places.mdoc","3df6b108605dd4f8","work-places.mdoc",["Map",509,510,521,522,533,534,544,545,555,556,566,567,577,578,588,589],"atacama-skies-2023",{"id":509,"data":511,"body":517,"filePath":518,"digest":519,"legacyId":520,"deferredRender":17},{"title":512,"description":513,"date":514,"published":17,"orientation":515,"photo":516},"Atacama Skies (2023)","A puddle in the desert",["Date","2023-11-15T00:00:00.000Z"],"landscape","/images/photos/atacama-skies-2023/photo.jpeg","Taken during my trip to Chile in 2023. Shot somewhere near the Salar de Atacama. This is one of the driest places on earth, receiving about 40mm of rainfall a year. The skies are unreal.","src/content/photos/atacama-skies-2023.mdoc","d8ee6c17ee5322f1","atacama-skies-2023.mdoc","bicycle-2024",{"id":521,"data":523,"body":529,"filePath":530,"digest":531,"legacyId":532,"deferredRender":17},{"title":524,"description":525,"date":526,"published":17,"orientation":527,"photo":528},"Bicycle (2024)","A bicycle in Toronto",["Date","2024-07-14T00:00:00.000Z"],"portrait","/images/photos/bicycle-2024/photo.jpeg","A bicycle parked outside Boxcar Social cafe in Toronto. Taken during a little impromptu street photography session. I was trying out the Fuji X100F for the first time. A very nice camera indeed.","src/content/photos/bicycle-2024.mdoc","3b51a49a0e658d77","bicycle-2024.mdoc","el-loa-airport-2023",{"id":533,"data":535,"body":540,"filePath":541,"digest":542,"legacyId":543,"deferredRender":17},{"title":536,"description":537,"date":538,"published":17,"orientation":527,"photo":539},"El Loa Airport (2023)","Views of the Tarmac",["Date","2023-11-16T00:00:00.000Z"],"/images/photos/el-loa-airport-2023/photo.jpeg","Taken during my trip to Chile in 2023.","src/content/photos/el-loa-airport-2023.mdoc","4dbbc6615dc401e3","el-loa-airport-2023.mdoc","magdalena-island-2023",{"id":544,"data":546,"body":551,"filePath":552,"digest":553,"legacyId":554,"deferredRender":17},{"title":547,"description":548,"date":549,"published":17,"orientation":515,"photo":550},"Magdalena Island (2023)","A Magellanic penguin on Magdalena Island",["Date","2023-11-10T00:00:00.000Z"],"/images/photos/magdalena-island-2023/photo.jpeg","From my visit to Punta Arenas, Chile in 2023. [Isla Magdalena](https://en.wikipedia.org/wiki/Magdalena_Island,_Magallanes_Region) is a small island in the Strait of Magellan, close to the bottom-most end of the continent before Antarctica. Magellanic penguins inhabit the island. These are smaller penguins than the emperor ones you often see in nature shows but beautiful creatures all the same. I was really happy to see them. I worry they won't be there for long with climate change. I still think of them often in my downtime. I hope I might have an opportunity to see them again some day.","src/content/photos/magdalena-island-2023.mdoc","393ede40a54dcd28","magdalena-island-2023.mdoc","salar-de-atacama-2023",{"id":555,"data":557,"body":562,"filePath":563,"digest":564,"legacyId":565,"deferredRender":17},{"title":558,"description":559,"date":560,"published":17,"orientation":515,"photo":561},"Salar de Atacama (2023)","A narrow path cuts through the Atacama Desert",["Date","2023-11-15T00:00:00.000Z"],"/images/photos/salar-de-atacama-2023/photo.jpeg","In 2023 I had the opportunity to visit Chile. We spent a few days in the Atacama Desert area. This photo was taken near Laguna Cejar in the [Salar de Atacama](https://en.wikipedia.org/wiki/Salar_de_Atacama). The scenery is breathtaking here. Nearby is the [ALMA Observatory](https://www.almaobservatory.org/en/home/). It is the place where black holes were first observed only a few years ago and is one of the largest astronomical projects we as humans have undertaken on earth. The elevation at 5000m coupled with the fact there’s almost never clouds here makes this one of the best places on earth to observe the solar system, which is why it is here. Even with the naked eye, one can see all kinds of astronomical objects from here at night. It really is something to behold.","src/content/photos/salar-de-atacama-2023.mdoc","74b6b28004a2f939","salar-de-atacama-2023.mdoc","toronto-2024",{"id":566,"data":568,"body":573,"filePath":574,"digest":575,"legacyId":576,"deferredRender":17},{"title":569,"description":570,"date":571,"published":17,"orientation":527,"photo":572},"Toronto (2024)","Outside Boxcar Social Riverside",["Date","2024-07-14T00:00:00.000Z"],"/images/photos/toronto-2024/photo.jpeg","From outside Boxcar Social cafe in Toronto. Taken during a little impromptu street photography session. I was trying out the Fuji X100F for the first time. A very nice camera indeed.","src/content/photos/toronto-2024.mdoc","3b5c4a99120f5366","toronto-2024.mdoc","torres-del-paine-2023",{"id":577,"data":579,"body":584,"filePath":585,"digest":586,"legacyId":587,"deferredRender":17},{"title":580,"description":581,"date":582,"published":17,"orientation":515,"photo":583},"Torres del Paine (2023)","Views from inside the park",["Date","2023-11-11T00:00:00.000Z"],"/images/photos/torres-del-paine-2023/photo.jpeg","I spent some time in [Torres del Paine](https://en.wikipedia.org/wiki/Torres_del_Paine_National_Park) in 2023. Among the most beautiful places I've been / seen. We ended up hiking up to Mirador las Torres while we were there. Took my breath away.","src/content/photos/torres-del-paine-2023.mdoc","58f7c7350cd370cf","torres-del-paine-2023.mdoc","valle-de-la-luna-2023",{"id":588,"data":590,"body":595,"filePath":596,"digest":597,"legacyId":598,"deferredRender":17},{"title":591,"description":592,"date":593,"published":17,"orientation":515,"photo":594},"Valle de la Luna (2023)","A little bit of Mars, right here on Earth",["Date","2023-11-14T00:00:00.000Z"],"/images/photos/valle-de-la-luna-2023/photo.jpeg","I travelled to Chile in 2023. One of the sights we saw was the Valle de la Luna. El Valle de la Luna&nbsp;(*Valley of the Moon*) is located 13 kilometres (8&nbsp;mi) west of&nbsp;[San Pedro de Atacama](https://en.wikipedia.org/wiki/San_Pedro_de_Atacama), in the north of&nbsp;[Chile](https://en.wikipedia.org/wiki/Chile)&nbsp;in the&nbsp;[Cordillera de la Sal](https://en.wikipedia.org/w/index.php?title=Cordillera_de_la_Sal&action=edit&redlink=1), in the&nbsp;[Atacama desert](https://en.wikipedia.org/wiki/Atacama_desert). It is a part of the&nbsp;[Reserva Nacional los Flamencos](https://en.wikipedia.org/wiki/Reserva_Nacional_los_Flamencos)&nbsp;and was declared a Nature Sanctuary in 1982 for its natural environment and strange lunar landscape, from which its name is derived. The Atacama desert is considered one of the driest places on earth, with some areas having not received a single drop of rain in hundreds of years.&nbsp;A prototype for a Mars rover was tested here by NASA because of the valley's dry and forbidding terrains. The Atacama is also the inspiration for Tattoine in the Mandalorian.","src/content/photos/valle-de-la-luna-2023.mdoc","d4e3ea44970fa7c4","valle-de-la-luna-2023.mdoc","now",["Map",601,602],"content",{"id":601,"data":603,"body":606,"filePath":607,"digest":608,"legacyId":609,"deferredRender":17},{"title":604,"description":605},"What I'm doing now","Current areas of focus + interests","{% spacer size=5.25 /%}\n\n- Working on the modernization of a provincial government's student loan application and management system. Technology stack is .NET and [Blazor](https://learn.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-8.0).\n- Working with a leading Canadian SaaS platform to improve its AI privacy posture.\n- Rebuilding this personal site with ~~[Next.js](https://nextjs.org/) and [mdx](https://mdxjs.com)~~ [Astro](https://astro.build/), [Keystatic](https://keystatic.com/), [Markdoc](https://markdoc.io/) and [Web Components](https://developer.mozilla.org/en-US/docs/Web/Web_Components).\n- Reading: [A Philosophy of Software Design](https://www.goodreads.com/book/show/39996759-a-philosophy-of-software-design) by John Ousterhout.\n- Listening: [my latest monthly playlist](https://open.spotify.com/playlist/6V3DpDkezPqgkKfUGEDqrb?si=2fd2665c275a4696).\n\n{% spacer /%}\n\nThis is a [now](https://nownownow.com/about) page. You can make one too.","src/content/now/content.mdoc","02ef6aa267748d87","content.mdoc","about",["Map",601,612],{"id":601,"data":613,"body":616,"filePath":617,"digest":618,"legacyId":609,"deferredRender":17},{"title":614,"description":615},"About","A few words about me","Heya 👋, I'm Nick.\n\nI'm a software developer and data protection consultant. I've been making things for the web since the early 2000s, for myself and for clients ranging from high-growth startups to multinational SaaS providers. \n\nI am currently a consultant with [ObjectSharp (a Centrilogic company)](https://objectsharp.com/), where I help organizations design and develop modern web applications. \n\nIn terms of subject matter expertise, I am a Certified Information Privacy Professional (CIPP) for Canada and Europe and have deep practical experience building WCAG AA compliant UI for enterprise software applications.\n\nOrganizations I've had the pleasure of working with include:\n\n{% section .company-list %}\n\n- [Miro](https://miro.com/)\n- [Hootsuite](https://hootsuite.com/)\n- [Bench](https://bench.co/)\n- [Ceridian](https://www.ceridian.com/)\n- [Finastra](https://www.finastra.com/)\n- [Hatch Ltd.](https://www.hatch.com/)\n- [Ontario Medical Association](https://www.oma.org/)\n- [Equitable Life](https://www.equitable.ca/)\n- [CDIC](https://www.cdic.ca/)\n- [Ontario HIV Treatment Network](https://www.ohtn.on.ca/)\n- [ABELDent](https://www.abeldent.com/)\n- [Carly Rian Group](https://carlyriangroup.com/)\n- [iQmetrix](https://iqmetrix.com/)\n- [Mel Science](https://melscience.com/)\n- [Cymax Group](https://www.cymaxgroup.com/)\n\n{% /section %}\n\nIn my free time, I like to spend time with my partner, Carmen, and our dog, George. I love running long distances, cycling around the city, and contributing to open source software.","src/content/about/content.mdoc","2096e600337b2945"]