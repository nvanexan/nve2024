---
import fs from "fs";
const props = Astro.props;

const light = fs.readFileSync(`./public${props.light}`, "utf8");
const dark = fs.readFileSync(`./public${props.dark}`, "utf8");
---

<nve-diagram light={light} dark={dark} alt={props.alt}></nve-diagram>
<script>
  export class NveDiagram extends HTMLElement {
    lightsvg = "";
    darksvg = "";
    listener: any = undefined;
    observer: any = undefined;

    constructor() {
      super();

      this.lightsvg = this.light;
      this.darksvg = this.dark;

      this.svgdata = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? this.darksvg
        : this.lightsvg;
    }

    set svgdata(value) {
      this.setAttribute("svgdata", `${value}`);
    }

    get svgdata() {
      return this.getAttribute("svgdata") || "";
    }

    set alt(value) {
      this.setAttribute("alt", `${value}`);
    }

    get alt() {
      return this.getAttribute("alt") || "";
    }

    set dark(value) {
      this.setAttribute("dark", `${value}`);
    }

    get dark() {
      return this.getAttribute("dark") || "";
    }

    set light(value) {
      this.setAttribute("light", `${value}`);
    }

    get light() {
      return this.getAttribute("light") || "";
    }

    handleColorSchemeChange(figure: HTMLElement) {
      return (event: any) => {
        const newColorScheme = event.matches ? "dark" : "light";

        switch (newColorScheme) {
          case "dark":
            figure.innerHTML = this.darksvg;
            break;
          case "light":
            figure.innerHTML = this.lightsvg;
            break;
          default:
            break;
        }

        this.addFigCaption(figure);
      };
    }

    addFigCaption(figure: HTMLElement) {
      if (this.alt) {
        const figcaption = document.createElement("figcaption");
        figcaption.textContent = this.alt;
        figure.appendChild(figcaption);
      }
    }

    connectedCallback() {
      const figure = document.createElement("figure");
      figure.className = "diagram";
      figure.innerHTML = this.svgdata;
      this.addFigCaption(figure);

      this.listener = this.handleColorSchemeChange(figure);
      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", this.listener);

      this.observer = new MutationObserver((mutationsList) => {
        for (let mutation of mutationsList) {
          if (
            mutation.type === "attributes" &&
            mutation.attributeName === "data-theme"
          ) {
            const newColorScheme =
              document.documentElement.getAttribute("data-theme");
            // You can react to the change here
            switch (newColorScheme) {
              case "dark":
                figure.innerHTML = this.darksvg;
                break;
              case "light":
                figure.innerHTML = this.lightsvg;
                break;
              default:
                break;
            }

            this.addFigCaption(figure);
          }
        }
      });

      this.observer.observe(document.documentElement, { attributes: true });

      this.removeAttribute("light");
      this.removeAttribute("dark");
      this.removeAttribute("svgdata");

      // Append to dom
      this.appendChild(figure);
    }

    disconnectedCallback() {
      if (this.listener) {
        window
          .matchMedia("(prefers-color-scheme: dark)")
          .removeEventListener("change", this.listener);
      }
      this.observer.disconnect();
    }
  }

  customElements.define("nve-diagram", NveDiagram);
</script>
