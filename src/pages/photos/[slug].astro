---
import { getCollection, getEntry } from "astro:content";
import PhotoLayout from "../../layouts/PhotoLayout.astro";
import ArticleTitle from "../../components/ArticleTitle.astro";
import Header from "../../components/Header.astro";
import Spacer from "../../components/Spacer.astro";
import BackToLink from "../../components/BackToLink.astro";
import ThemeToggle from "../../components/ThemeToggle.astro";

const { slug } = Astro.params;
if (!slug) throw new Error("Slug not found");
const photo = await getEntry("photos", slug);

if (!photo) throw new Error("No photo found for this slug");
const { Content } = await photo.render();

const photos = await getCollection("photos");
const sortedPhotos =
  photos
    ?.filter((p) => !!p.data.published)
    ?.sort(
      (a, b) =>
        new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
    ) ?? [];

const currentIndex = sortedPhotos.findIndex((p) => p.slug === slug);
// Calculate start index, ensuring it's not less than 0
const startIndex = Math.max(currentIndex - 2, 0);

// Calculate end index to get up to 4 items, ensuring it does not exceed the array's length
const endIndex = Math.min(startIndex + 4, sortedPhotos.length);

var currentPhotos = sortedPhotos
  .filter((p) => p.slug !== slug)
  .slice(startIndex, endIndex);

// If the slice is at the start or end of the array and returns less than 4 items,
// adjust the slice to ensure we always attempt to return 4 items if possible
const adjustedLength = currentPhotos.length;
if (adjustedLength < 4 && sortedPhotos.length >= 4) {
  if (startIndex === 0) {
    // If we are at the start, try to get more items from the end
    currentPhotos = sortedPhotos.filter((p) => p.slug !== slug).slice(0, 4);
  } else if (endIndex === sortedPhotos.length) {
    // If we are at the end, try to get more items from the start
    currentPhotos = sortedPhotos.filter((p) => p.slug !== slug).slice(-4);
  }
}

// Generate static pages
export async function getStaticPaths() {
  const photos = await getCollection("photos");
  return photos.map((photo) => ({ params: { slug: photo.slug } }));
}
---

<PhotoLayout title={photo.data.title} description={photo.data.description}>
  <header class="photo-layout-header">
    <ThemeToggle />
    <Header showTitle={true} />
    <ArticleTitle
      heading={photo.data.title}
      subheading={photo.data.description}
    />
  </header>
  <div class={`photo-outer-container ${photo.data.orientation}`}>
    <div class="photo-inner-container">
      <img src={photo.data.photo} alt={photo.data.description} />
    </div>
  </div>
  <div class="photo-description">
    <Content />
    {
      currentPhotos.length > 1 && (
        <>
          <Spacer />
          <section class="writing-list">
            <h3>More Photos</h3>
            <ul>
              {currentPhotos.map(async (f) => {
                return (
                  <li>
                    <a href={`/photos/${f.slug}`}>{f.data.title}</a> <hr />
                    <em>({f.data.date})</em>
                  </li>
                );
              })}
            </ul>
          </section>
        </>
      )
    }
    <Spacer />
    <BackToLink text="Back to Photos" href="/photos" />
  </div>
</PhotoLayout>
