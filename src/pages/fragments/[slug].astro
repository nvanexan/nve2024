---
import { getCollection, getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import ArticleTitle from "../../components/ArticleTitle.astro";
import Header from "../../components/Header.astro";
import Spacer from "../../components/Spacer.astro";
import BackToLink from "../../components/BackToLink.astro";
import FwdToLink from "../../components/FwdToLink.astro";

const { slug } = Astro.params;
if (!slug) throw new Error("Slug not found");
const fragment = await getEntry("fragments", slug);

if (!fragment) throw new Error("No fragment found for this slug");
const { Content } = await fragment.render();

const fragments = await getCollection("fragments");
const sortedFragments =
  fragments
    ?.filter((p) => !!p.data.published)
    ?.sort((a, b) => b.data.date.getTime() - a.data.date.getTime()) ?? [];

// Get the current year and month
const currentDate = fragment.data.date;
const currentYear = currentDate.getFullYear();
const currentMonth = currentDate.getMonth(); // Note: getMonth() returns 0 for January, 1 for February, etc.
const currentMonthName = currentDate.toLocaleString("default", {
  month: "long",
});

// Filter fragments to include only those from the current year and month
const currentFragments = sortedFragments.filter((fragment) => {
  const fragmentDate = fragment.data.date;
  return (
    fragmentDate.getFullYear() === currentYear &&
    fragmentDate.getMonth() === currentMonth
  );
});

const currentFragmentIndex = currentFragments.findIndex(
  (f) => f.slug === fragment.slug
);

// Generate static pages
export const prerender = true;
export async function getStaticPaths() {
  const fragments = await getCollection("fragments");
  return fragments.map((fragment) => ({ params: { slug: fragment.slug } }));
}
---

<Layout title={fragment.data.title} description={fragment.data.description}>
  <Header showTitle={true} />
  <ArticleTitle
    heading={fragment.data.title}
    subheading={fragment.data.description}
  />
  <div class="post">
    <Content />
  </div>
  <Spacer />
  <section class="writing-list">
    <h3>{currentMonthName}'s Fragments</h3>
    <ul>
      {
        currentFragments.map(async (f, i) => {
          const className = i === currentFragmentIndex ? "is-current" : "";
          return (
            <li class={className}>
              {i !== currentFragmentIndex ? (
                <a href={`/fragments/${f.slug}`}>{f.data.title}</a>
              ) : (
                <span class="current-title">{f.data.title}</span>
              )}
              <hr />
              <em>({f.data.date.toLocaleDateString("en-ca")})</em>
            </li>
          );
        })
      }
    </ul>
  </section>
  <Spacer />
  <BackToLink text="All fragments" href="/fragments" />
</Layout>
